package main

const prelude = `// Code generated by cmd/library to keep in sync with mobile. DO NOT EDIT.
package main

/*
#include <stdlib.h>

typedef struct Chat {
	int active;
	char* id;
	char* name;
	int chatType;
	char* color;
	unsigned long long deletedAtClockValue;
	char* description;
	char* emoji;
	char* identicon;
	unsigned long long lastClockValue;
	int muted;
	long long timestamp;
	int unviewedMentionsCount;
	int unviewedMessagesCount;

} Chat;


// lastMessage: null
// members: null
// membershipUpdateEvents: null

typedef struct ChatArray {
	int len;
	Chat* data;
} ChatArray;

*/
import  "C"
import "context"
import "unsafe"
import mobile "github.com/status-im/status-go/mobile"
import "github.com/status-im/status-go/protocol"


func main() {}
`

const intType = "int"
const stringType = "string"
const unsafePointerType = "&{unsafe Pointer}"
const boolType = "bool"

const sequel = `// Experimental. Do not use



func boolToCInt(value bool) C.int {
	if value {
		return C.int(1)
	}
	return C.int(0)
}

func mapChatToC(c *protocol.Chat) C.Chat {
	return C.Chat {
		active: boolToCInt(c.Active),
		id: C.CString(c.ID),
		name: C.CString(c.Name),
		chatType: C.int(c.ChatType),
		color: C.CString(c.Color),
		deletedAtClockValue: C.ulonglong(c.DeletedAtClockValue),
		description: C.CString(c.Description),
		emoji: C.CString(c.Emoji),
		identicon: C.CString(c.Identicon),
		lastClockValue: C.ulonglong(c.LastClockValue),
		muted: boolToCInt(c.Muted),
		timestamp: C.longlong(c.Timestamp),
		unviewedMentionsCount: C.int(c.UnviewedMentionsCount),
		unviewedMessagesCount: C.int(c.UnviewedMessagesCount),
	}
} 


//export Chats
func Chats() C.ChatArray {
	chats := mobile.GetExtAPI().Chats(context.Background())
	count := len(chats)
    
	cArray := C.malloc(C.size_t(count) * C.size_t(unsafe.Sizeof(C.Chat{})))
	goArray := (*[1 << 30]C.Chat)(cArray)

	for i, chat := range chats {
		goArray[i] = mapChatToC(chat)
	}

	c_chats := C.ChatArray{
		len: C.int(count),
		data: (*C.Chat)(cArray),
	}

	return c_chats
}
`
