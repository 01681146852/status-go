pipeline {
  agent none

  parameters {
    booleanParam(
      name: 'GITHUB_RELEASE',
      description: 'Enable this to create a new GitHub release.',
      defaultValue: false,
    )
  }

  options {
    disableConcurrentBuilds()
    /* Go requires a certain directory structure */
    checkoutToSubdirectory('src/github.com/status-im/status-go')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '30',
      daysToKeepStr: '30',
    ))
  }

  stages {
    stage('Build') {
      parallel {
        stage('Android') {
          agent { label 'linux' }

          environment {
            STATUS_PATH = 'src/github.com/status-im/status-go'
            GOPATH = "${env.WORKSPACE}"
            PATH = "${env.PATH}:${env.GOPATH}/bin"
            ANDROID_HOME = '/usr/lib/android-sdk'
            ANDROID_SDK_ROOT = '/usr/lib/android-sdk'
            ANDROID_NDK = '/usr/lib/android-ndk'
            ANDROID_NDK_HOME = '/usr/lib/android-ndk'
          }

          stages {
            stage('Prep') {
              steps { script {
                lib = load("${env.STATUS_PATH}/_assets/ci/lib.groovy")
                println("Git Branch: ${lib.gitBranch()}")
                println("Git Commit: ${lib.gitCommit()}")
              } }
            }

            stage('Setup') { steps { dir(env.STATUS_PATH) {
              sh 'make setup-build'
            } } }

            stage('Lint') { steps { dir(env.STATUS_PATH) {
              sh 'make ci'
            } } }

            stage('Build') {
              stages {
                stage('Compile') { steps { dir(env.STATUS_PATH) {
                  sh 'make statusgo-android'
                } } }
                stage('Archive') { steps {
                  sh """
                    mv ${env.STATUS_PATH}/build/bin/statusgo.aar \
                      ${env.WORKSPACE}/status-go-android-${lib.suffix()}.aar
                  """
                  archiveArtifacts("status-go-android-${lib.suffix()}.aar")
                } }
                stage('Upload') { steps { script {
                  lib.uploadArtifact("status-go-android-${lib.suffix()}.aar")
                } } }
              }
            }

            stage('Release') { when { expression { params.GITHUB_RELEASE == true } }
              steps {
                sh 'make prepare-release'
                withCredentials([[
                  $class: 'UsernamePasswordMultiBinding',
                  credentialsId: 'status-im-auto',
                  usernameVariable: 'GITHUB_USER',
                  passwordVariable: 'GITHUB_TOKEN'
                ]]) {
                  sh "yes | make release release_branch=${gitBranch}"
                }
                sh 'make clean-release'
              }
            }
          }
        } // Android

        stage('iOS') {
          agent { label 'macos' }

          environment {
            STATUS_PATH = 'src/github.com/status-im/status-go'
            GOPATH = "${env.WORKSPACE}"
            PATH = "${env.PATH}:${env.GOPATH}/bin"
          }

          stages {
            stage('Prep') {
              steps { script {
                lib = load("${env.STATUS_PATH}/_assets/ci/lib.groovy")
                println("Git Branch: ${lib.gitBranch()}")
                println("Git Commit: ${lib.gitCommit()}")
              } }
            }

            stage('Setup') { steps { dir(env.STATUS_PATH) {
              sh 'make setup-build'
            } } }

            stage('Lint') { steps { dir(env.STATUS_PATH) {
              sh 'make ci'
            } } }

            stage('Build') {
              stages {
                stage('Compile') { steps { dir(env.STATUS_PATH) {
                  sh 'make statusgo-ios'
                  dir('build/bin') {
                    sh 'zip -r Statusgo.framework.zip Statusgo.framework'
                  }
                } } }
                stage('Archive') { steps {
                  sh """
                    mv ${env.STATUS_PATH}/build/bin/Statusgo.framework.zip \
                      ${env.WORKSPACE}/status-go-ios-${lib.suffix()}.zip
                  """
                  archiveArtifacts("status-go-ios-${lib.suffix()}.zip")
                } }
                stage('Upload') { steps { script {
                  lib.uploadArtifact("status-go-ios-${lib.suffix()}.zip")
                } } }
              }
            }

            stage('Release') { when { expression { params.GITHUB_RELEASE == true } }
              steps {
                sh 'make prepare-release'
                withCredentials([[
                  $class: 'UsernamePasswordMultiBinding',
                  credentialsId: 'status-im-auto',
                  usernameVariable: 'GITHUB_USER',
                  passwordVariable: 'GITHUB_TOKEN'
                ]]) {
                  sh "yes | make release release_branch=${gitBranch}"
                }
                sh 'make clean-release'
              }
            }
          }
        } // iOS
      } // parallel
    } // stage
  } // stages
}
