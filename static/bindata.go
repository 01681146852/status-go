// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../config/README.md (2.911kB)
// ../config/cli/anon-metric-node-client.json (857B)
// ../config/cli/anon-metric-node-server.json (696B)
// ../config/cli/fleet-eth.prod.json (4.469kB)
// ../config/cli/fleet-eth.staging.json (2.145kB)
// ../config/cli/fleet-eth.test.json (2.174kB)
// ../config/cli/fleet-go-waku.test.json (743B)
// ../config/cli/fleet-wakuv2.prod.json (747B)
// ../config/cli/fleet-wakuv2.test.json (748B)
// ../config/cli/les-enabled.json (58B)
// ../config/cli/mailserver-enabled.json (176B)
// ../config/status-chain-genesis.json (612B)
// keys/bootnode.key (65B)
// keys/firebaseauthkey (153B)
// keys/test-account1-status-chain.pk (489B)
// keys/test-account1.pk (491B)
// keys/test-account2-status-chain.pk (489B)
// keys/test-account2.pk (491B)
// keys/test-account3-before-eip55.pk (489B)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ConfigReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5b\x6f\xdb\x3a\x12\x7e\xd7\xaf\x18\xa8\x0f\xdb\x00\xa9\xe4\xc6\x71\x9b\xa3\x97\xcd\xb5\xe7\x64\x37\x4d\x02\xc7\xdd\x3e\x04\x81\x45\x8b\x23\x99\x0d\xc5\x51\x49\xca\xae\xbb\xe8\x7f\x5f\x0c\x25\x5f\x72\xd9\x02\x07\x01\x62\x9b\x9c\x19\x7e\xf3\x7d\xc3\x19\xbe\x81\x4b\xe3\x2d\xc9\xb6\xf0\x8a\x4c\x14\x4d\xe6\xca\x81\xa4\xa2\xad\xd1\x78\x90\xe8\x0a\xab\x66\xe8\xc0\xcf\x11\xc4\x42\x28\x2d\x66\x1a\x81\x1a\xb6\x76\xa0\x4c\xd8\xf8\xd7\xdd\xcd\x35\x14\x64\x4a\x55\x41\x49\x16\x72\xe7\x85\x6f\xdd\xbb\x8a\xf2\x84\x43\x22\x38\x6f\xdb\xc2\xb7\x16\x81\xca\x17\x2e\x7c\x22\x96\xca\xa0\x5c\x07\xbc\xcf\x1b\x61\x45\xed\xd2\xce\x22\xa9\x28\x7f\x78\x9b\x3e\x5f\xdb\x83\x52\x69\xdc\x87\xe5\x5c\x15\x73\x10\xda\x11\x47\xf4\x42\x19\x0e\xe8\x85\xd2\x28\xa1\xa0\x9a\x53\x71\x40\x06\x6a\x14\x46\x99\x8a\x31\xa0\x28\xe6\x7d\x1a\x09\x30\xc2\xfc\x9a\x24\x9e\x85\xd0\x79\x0f\xb7\x47\xd5\x25\x5f\xa1\x41\x2b\x74\x8f\xb9\xb5\x82\x5d\xe1\x11\x57\x0e\x84\x0f\x16\xd3\xa9\x25\xf2\xd3\xe9\x93\x14\x19\x61\x12\x45\x97\xdd\x52\xc7\x67\x4f\x1e\x95\x20\xcc\x6a\xc3\xa5\xb0\x08\x9e\x08\x16\xa2\x6a\x11\x4a\x44\x0d\xa5\x45\x5e\x83\x7b\x6a\xd0\x80\x30\xa0\x9c\x6b\xf1\xe1\xed\xdc\xfb\xc6\x65\x69\x5a\x29\x3f\x6f\x67\x49\x41\x75\xda\x33\xae\x36\xdf\x2a\x4a\x83\xb5\x4b\x0d\x2e\xf7\x92\x28\xba\xf8\x21\xea\x46\xe3\x46\x27\xa5\xd1\x41\x21\x0c\xcc\x10\x16\x0a\x97\xbb\xec\x77\x36\x69\xa1\x15\xf3\xbe\xfd\xb5\x07\x25\x69\x89\x36\x89\xa2\x37\x70\x59\x37\x64\xbd\x30\x1e\xee\x30\x54\x8f\xeb\xb4\x7e\x26\xad\x43\xd6\xcd\x87\xf0\x9e\xc0\xe1\x22\xf0\xe8\x7a\x9f\x8e\xfd\x9a\x9c\x07\xb5\x09\x48\xcc\x3a\x13\xa2\x95\x63\xcf\x19\x6a\x5a\xf2\xa1\x6f\x9e\xe8\xd4\x9d\xc7\xac\xbf\x52\x56\xbd\x44\x49\x14\x9d\x18\xc0\x3e\x79\x2a\x9f\x1f\xe5\xd0\x7b\x65\x2a\x07\x4b\x6a\x35\x63\x2c\x74\x2b\x31\x8b\xf2\x3c\xff\xe6\xc8\x44\xff\x8d\x00\x00\xe2\x6b\xf4\x4b\xb2\x8f\x97\xe7\x71\x06\xef\xf7\xbb\xb5\x73\xe1\xc5\xb9\xb2\x71\x06\x71\xea\xeb\x66\xcb\xfc\x3b\x29\xbc\x88\x7b\x2b\xc6\xfb\x6f\x5c\xb1\xd5\xfb\x83\xe1\xf7\x25\x3e\xfb\xbf\xb6\x1b\xa3\x91\xf8\x73\x41\xad\x8b\x33\x28\x85\x76\xb8\x09\x70\xae\x5c\x41\x0b\xb4\xab\x67\x3b\x57\xcc\x8e\x39\x91\x32\x60\x18\x24\xe1\x2f\x1b\x0e\x86\x83\x9d\xa8\x15\x1b\xd9\x09\x35\xaa\xe0\xc8\xf7\xf1\x72\xae\x5c\x83\xb6\x16\x4a\xc7\x0f\xd1\x2f\xce\x34\x14\xe8\x8a\xda\x7f\x48\x58\x32\x29\x9e\x00\x4d\xb8\xe9\x81\xd0\xf1\xed\x19\x30\x5f\xbd\x89\x41\x94\x2f\x08\xfa\x6b\x32\xb9\xbd\x08\x3e\x32\xce\xc0\xdb\x76\x0d\x92\x37\xfe\x22\xe7\x77\x20\xc6\x3b\x5b\xb7\x64\x79\xeb\x68\x74\x38\xea\x57\x4f\x6e\x2f\x3f\x93\x6c\x35\x32\xdc\x18\xfd\x7c\xdf\xa0\xdf\x5f\xe2\x6c\xb8\x2f\x64\xad\x4c\xbc\xc1\x6c\x80\xac\x44\xcb\x70\x85\xfc\xd6\x3a\x0f\x9a\xaa\x8a\x6f\xf8\x46\xd5\xdf\x20\xbe\xa2\xea\x93\xd2\x18\xe4\x5b\x08\x9b\x6a\xaa\xb6\x12\x26\x9a\xaa\x35\xcc\x2b\xaa\xae\x70\x81\x9a\x2d\x2f\xaf\x3f\xdd\xec\xac\x7f\x16\x3f\xee\xd4\x4f\x8e\x71\x30\x18\x3c\x59\x3e\x15\xc5\x63\xdb\x70\x0a\xa3\xed\xfa\x19\xd5\x8d\x45\xe7\xc6\xe4\xf9\x46\xf4\x44\xf5\xf9\xfc\x47\x68\x25\x21\x5f\x9f\x96\x6f\x93\x10\x16\x33\xc8\x2f\xc6\xe3\x9b\x71\xbe\x0f\xf9\xd7\x93\xf1\x35\x7f\x32\x16\xfe\x3c\xbf\x38\xfd\xf2\x27\x7f\x99\x8c\x4f\xce\x2e\xf2\xee\x9a\x7c\x15\x8f\xed\xba\x9d\xad\xe5\xed\xc4\x5d\x51\x6b\xc1\x90\x0c\xad\xc5\xa2\x16\x2b\x60\xe3\xb7\x35\x49\x55\x2a\x94\xf0\xb5\x2b\x90\x3d\x68\x2c\x79\x2a\x48\x43\x8d\xce\x89\x0a\x3b\x3a\xb5\xde\x14\x49\x7f\x5b\xc0\xcf\x95\x7b\xc1\xef\x16\x41\x9c\x41\xb7\x16\xd6\x5f\xab\x92\x9d\x8d\xcf\x42\xe9\x3b\xb4\x0b\xb4\x2f\x2d\x7e\x7f\xe3\xd2\xa5\x78\x6c\xe3\x1d\xf3\x6d\xa8\x5b\xe1\xdc\x92\x2c\x1f\x1a\xf7\x4e\x54\x96\x5a\x19\x7c\xa7\xcc\x8c\x7e\xc4\xc1\xe9\x57\xaf\x44\x98\x07\x2f\x9d\x73\x6e\x67\xad\x43\x19\x86\x9c\x5b\xd5\x35\x7a\xab\x0a\x40\x53\xd8\x55\xe8\xe2\xdc\x5f\xe6\xca\x79\xb2\x2b\xb0\xf8\xbd\x45\xe7\x5d\x12\x45\xa7\x2b\x1e\x25\xa2\xd5\x1e\x94\x87\xa5\xd2\x9a\xc3\x40\xae\x59\x67\x39\xcb\x01\xeb\x19\x4a\x89\x12\x38\x8d\x99\x70\x98\xc0\x84\x82\x4d\x43\xce\x57\x16\x79\xd4\x3a\x8f\x42\x06\x19\xb9\x9c\x99\xfe\x48\x48\x19\xb8\xe7\x1f\x41\xd6\xae\xf5\x65\xd1\x73\x2d\xce\xfb\xb8\x2f\xf4\x88\x6f\xff\xfc\x5b\x1a\x7d\x19\x5f\x32\x87\x6b\x58\x59\x9a\xb6\x0e\x6d\xd6\xf4\x14\x1d\xcf\xc9\xf9\x8c\x7b\xc5\x3f\xfb\xb9\x16\xf7\xbe\xbf\x9e\x30\x1c\x4d\xa7\xd7\x37\x93\x8b\x6c\x3a\x0d\xed\x7f\xcd\xce\x3a\x4c\xc7\xf2\x6c\x05\x77\x41\x2b\x38\x69\x1a\x10\x46\xc2\x3d\xe7\xc8\x8d\xcb\x05\x61\xdc\x76\x14\x96\x1a\xd1\xbb\xa4\xd3\x36\x51\x75\xba\xc7\x62\xe5\xaf\x69\x9d\xf7\x83\xe4\x4c\xb7\xdc\x19\x77\x66\x89\x72\xeb\xb9\x55\x0b\x13\xea\x7d\x39\x17\x1e\x1a\x44\xeb\xc2\xf9\x33\x22\xef\xbc\x15\x4d\xb8\x3f\xae\xe3\x7c\xe7\xb5\x13\x54\x12\xa6\x08\x53\xd6\x60\xe1\x39\x02\x1a\x56\xdd\x79\x61\xb9\x18\x76\x85\x89\x9f\x40\xd8\x28\xf0\x2a\xfb\xf1\x27\xce\xb0\xef\x88\x49\x63\x49\xae\xdb\xd0\x29\x91\xe7\x21\x13\xba\xfb\x5a\x56\x64\x80\x59\x9a\x0e\x0f\x47\x68\x7d\xf7\xff\xf8\x60\x98\x1c\x8e\x92\x0f\x1f\x93\xa3\x3f\xb2\xe1\xe0\x70\x70\xd8\x89\xf3\xd0\x07\x9a\x58\x46\x23\xb7\x85\xff\x6a\xc4\xdd\xd9\x75\xfc\xc7\x51\xf2\xf1\x43\x32\x3a\x4c\x86\x07\xd9\x70\x30\x7a\x1e\x91\xe5\x53\xc5\xff\x05\xb7\x3b\x09\x8f\xdf\x1f\x24\xc3\xc3\x64\xf4\x21\xf9\x78\x14\x46\xd8\xa8\x0f\x15\x6d\xab\x26\xdf\xa4\x9a\xc3\x1c\x75\x13\x46\xfe\xab\xf4\x97\xca\xc8\x4e\xb7\xf0\xbe\x58\x85\xc7\x44\x4d\x16\x77\x26\xbf\x27\x98\x8b\x05\x37\x2f\x61\x20\xdf\x81\x9a\x03\xbf\x61\x5f\xb2\x91\x6f\x9e\x9a\x16\x21\x8c\x1b\x17\x9c\x84\xd6\x2b\x10\xe1\xfe\x76\xa5\x42\xa6\x93\x3b\x89\xfe\x17\x00\x00\xff\xff\xf6\x75\xd6\x56\x5f\x0b\x00\x00")

func ConfigReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_ConfigReadmeMd,
		"../config/README.md",
	)
}

func ConfigReadmeMd() (*asset, error) {
	bytes, err := ConfigReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/README.md", size: 2911, mode: os.FileMode(0644), modTime: time.Unix(1631628269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0x5, 0x57, 0xc9, 0x1b, 0x14, 0xb7, 0x7, 0xe3, 0xd5, 0x54, 0x3d, 0xea, 0x6a, 0xd5, 0xda, 0xee, 0x9b, 0x48, 0xd8, 0x93, 0xf4, 0x18, 0x78, 0x14, 0x8e, 0x41, 0x61, 0x97, 0x9b, 0xc4, 0xa7}}
	return a, nil
}

var _ConfigCliAnonMetricNodeClientJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x04\x9e\x9d\x44\xfc\x15\xe9\x5b\x12\xe7\xfb\x12\xd4\x0e\x8c\x38\x45\x0f\x45\x0f\x2b\x71\x25\x0b\x96\x45\x81\xa2\xec\x34\x45\xde\xbd\xa0\x9c\x38\x6e\x0b\xde\x66\x87\x33\x8b\x99\xfd\x35\x49\x12\xf2\x88\xe1\xe0\xfc\xf6\x61\x4e\x66\x09\x9d\x46\x64\x0e\x01\xe6\xb5\x27\xb3\x84\x5c\x85\x5d\x77\xd5\x07\x08\x43\x7f\x51\xb9\x0b\x0b\x01\xc8\xc8\x79\x74\x16\xbf\xe0\xcf\xc8\x49\x79\x4e\x19\xd7\x05\x4f\xad\x34\x4c\x22\x07\x9a\xe5\xa2\xa0\x42\x09\x28\x94\x56\x39\xb7\x60\xb4\x64\x59\x99\xd2\x5c\x17\x0a\xd2\x8c\xd3\x42\x48\x5a\x50\x43\x2d\x4f\x8f\x82\x4f\xd8\x5a\x7c\xdd\xbb\xa1\x27\xb3\x24\xf8\x01\xdf\x6d\xe6\x75\x5f\xb8\x3d\xfa\x68\x55\x42\xd3\x1f\xf1\x45\xdd\x07\x6c\xaf\xad\x1d\xb7\x4c\x2f\xc7\x37\xe3\x29\x4f\xf9\x87\x5c\x15\x29\xfe\xd9\x75\x75\x11\x25\xbf\x93\xc3\xa6\xee\x3b\xf4\x3b\xa8\x1b\xf2\x63\x3a\x89\xac\xfb\xe7\xe7\xd5\x5d\x0b\x79\x83\xf6\xdc\x35\xc2\xf7\xae\x0f\x51\x9b\xb2\x6c\x54\xa7\xe4\x34\x5a\x39\x1f\x47\x5a\x0a\x39\x62\xd7\xab\x87\xa5\xb3\x43\x83\xd1\x87\x60\xd8\x4c\x5b\x0c\xd3\x03\xe6\x7c\x0a\x76\x57\xb7\x53\xe8\xba\x1d\x06\x1f\x17\x39\xfa\x7e\x83\xed\x70\xeb\xda\xb2\xae\xc8\x2c\x89\x2d\x24\x09\xf9\x77\x8f\x13\xb8\x84\xba\x59\xa3\xdf\xa3\xff\x73\x7a\x5e\xd4\x1e\xfc\x59\x59\xf6\xea\x00\xdb\x81\xbc\xf3\x3e\xff\xaf\xa0\xef\x0f\xce\x47\x17\xf2\x5e\xab\x2b\xcb\xa6\x6e\xf1\xa2\x6e\x73\xf7\x42\x26\x49\xf2\x76\xdc\x71\xe1\xaa\xff\xea\x06\x4f\xe2\x8d\xab\x3e\x2f\xe1\xb2\x71\xd5\x31\x90\x85\xab\x16\xb8\xc7\x26\xf2\xe6\x77\x37\x5f\xff\x3f\xc1\x4b\x78\x59\xd7\xaf\x51\x80\xa5\xe9\x19\x78\x03\xc5\x76\xe8\x62\x56\xf2\x03\xbd\x75\xbb\xce\x63\xdf\x3f\xb9\x00\xe1\x2c\x83\x38\x5e\x6f\x36\xf8\x12\xfe\x4e\xeb\xba\x75\xed\xf2\x98\xe9\x1a\x5b\x3b\x5e\x2f\x49\x05\x35\x52\x89\xcc\x48\x9e\x73\x54\x19\x43\x2b\x94\xb6\x90\x71\x06\x92\x97\x50\xaa\x3c\x85\x5c\xe4\x90\xb1\x4c\x03\x63\x39\x5a\x2a\xa9\x11\x86\x49\x63\xc0\x14\x5a\x32\xa1\x8c\x52\x99\x14\x9a\x73\xc1\x34\x2b\xa9\x2e\xb4\x92\x28\x04\x62\x3c\xf0\x82\x97\x54\x1b\x25\x25\x0a\xb0\xd4\x18\x95\x4a\xe0\x42\x0a\x93\x51\x9e\x67\x5a\x8d\xf9\x4d\xde\x7e\x07\x00\x00\xff\xff\xf7\x46\x3e\x7d\x59\x03\x00\x00")

func ConfigCliAnonMetricNodeClientJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliAnonMetricNodeClientJson,
		"../config/cli/anon-metric-node-client.json",
	)
}

func ConfigCliAnonMetricNodeClientJson() (*asset, error) {
	bytes, err := ConfigCliAnonMetricNodeClientJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/anon-metric-node-client.json", size: 857, mode: os.FileMode(0644), modTime: time.Unix(1631628269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0xdf, 0xcd, 0xc8, 0x92, 0x1d, 0x63, 0x5e, 0xe1, 0xf9, 0x7f, 0xed, 0xf2, 0x68, 0x6b, 0x20, 0xff, 0x1d, 0x3b, 0xc9, 0x7b, 0xb9, 0x6a, 0xba, 0xd3, 0xbd, 0xf7, 0x48, 0x7b, 0x5a, 0x52, 0x79}}
	return a, nil
}

var _ConfigCliAnonMetricNodeServerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcf\x6f\x9b\x30\x18\xbd\xe7\xaf\xb0\x7c\xa6\xad\x81\x98\xa4\xdc\xd2\xd2\xad\xd1\x92\x2a\x4a\x52\xed\x30\xed\x60\xe3\x0f\x62\x05\xf8\x90\x6d\x48\xd7\xa9\xff\xfb\x64\x58\xb3\xa8\x9d\x7c\x7b\xdf\xd3\xfb\xe1\xf7\x7b\x42\x08\x7d\x02\x77\x42\x73\x5c\x66\x34\x25\x61\xe0\x91\x4c\x38\x91\x69\x43\x53\x42\x6f\x5c\xdd\xde\x58\x27\x5c\x67\xaf\x4a\xbc\x52\xc2\x09\x3a\x70\x9e\x50\xc1\x37\xf8\xe5\x39\x92\xe7\x09\x97\x79\xa1\x24\x8b\xa2\x24\x64\x3c\x92\xb3\x30\x97\xbc\x48\x14\xe4\xec\x96\x2b\x06\x21\x53\x45\x32\xbd\x95\x53\x11\xc9\x99\x9a\xcf\x43\xe0\x1c\x62\x96\xe4\x12\x64\x3e\x0a\x6e\xa1\x51\xf0\xda\x63\x67\x69\x4a\x9c\xe9\xe0\xaf\x4d\xa6\x6d\x8e\x3d\x18\x6f\x55\x88\xca\x8e\xf8\x4a\x5b\x07\xcd\x42\xa9\x21\x25\xbb\x1e\x5e\x1a\xb3\x98\xc5\xef\x72\xa5\xa7\x98\x3d\xb6\x3a\xf7\x92\x3f\xe8\xe9\xa0\x6d\x0b\xa6\x16\xba\xa2\x3f\x83\x89\x67\x3d\xee\xf7\x9b\x87\x46\xc8\x0a\xd4\xa5\xab\x87\x1f\xd1\x3a\xaf\x1d\x46\xb3\x41\x3d\xa4\xe7\xd3\x06\x8d\x3f\xcd\xf9\x94\x0f\xd8\x62\xb3\x5c\xa3\xea\x2a\xf0\x3e\x14\xdc\x21\x68\xc0\x05\x27\x90\x71\x20\x54\xad\x9b\x40\xb4\x6d\x0d\xce\xf8\x20\xa3\xef\x77\x71\xec\xee\xb1\x29\x74\x49\x53\xe2\x57\x20\x84\x7e\xce\xf1\x61\x8a\x5e\x98\x8b\x39\xd4\xcd\x49\x1c\x3b\x3a\x21\xe4\x6d\xd4\x5c\x61\xf9\x45\x57\x70\xa6\x56\x58\xfe\x5b\xee\xba\xc2\x72\x2c\xb0\xc2\x72\x05\x3d\x54\x9e\x97\x3d\xdc\x3d\x7f\x3d\xc3\x6b\xf1\xb2\xd3\xaf\x5e\x20\x62\xec\x02\xbc\x13\xf9\xb1\x6b\x7d\x37\xfe\x8e\xde\x63\xdd\x1a\xb0\x76\x8b\x4e\xb8\x8b\xcc\xfe\xbc\x3b\x1c\xe0\xc5\x7d\x6c\xb7\x68\xb0\x59\x8f\x7f\xb0\x03\xd3\x83\xf9\x6f\xdd\x4f\xac\x0d\x5a\x57\x1a\xb0\xcf\xdb\xa5\x0f\x3c\xd4\x9d\xbc\xfd\x09\x00\x00\xff\xff\x34\xe5\xb6\x04\xb8\x02\x00\x00")

func ConfigCliAnonMetricNodeServerJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliAnonMetricNodeServerJson,
		"../config/cli/anon-metric-node-server.json",
	)
}

func ConfigCliAnonMetricNodeServerJson() (*asset, error) {
	bytes, err := ConfigCliAnonMetricNodeServerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/anon-metric-node-server.json", size: 696, mode: os.FileMode(0644), modTime: time.Unix(1631628269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x2f, 0x97, 0xab, 0x77, 0x61, 0x93, 0x9d, 0x1f, 0x33, 0x18, 0x72, 0xad, 0xce, 0xa3, 0x35, 0xa9, 0x44, 0xbf, 0x29, 0xa8, 0xea, 0x21, 0xb7, 0x22, 0x7f, 0x7d, 0x3a, 0x6b, 0x55, 0x3c, 0x66}}
	return a, nil
}

var _ConfigCliFleetEthProdJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x97\x4d\x8b\x5c\xc9\xd1\x85\xf7\xfa\x15\x4d\xaf\x5f\x6a\xe2\x23\x23\x32\x43\x2b\xf1\x8e\xed\x9d\x07\xe3\xf1\xce\x78\x11\x9f\x1e\x81\x50\x1b\xa9\x35\x60\x9b\xf9\xef\xe6\x6a\x64\xa6\x85\xd5\xeb\x5e\x15\x64\x5d\xaa\xce\x8d\x38\xe7\x89\x8c\x7f\xbf\xba\xbb\xbb\xff\x73\xbf\xaf\xfe\xd7\xcf\x0f\x9f\x3e\xde\xbf\xbe\x1b\x7f\xf7\xb1\xff\xef\x3a\xfe\xe1\xe1\x77\x6f\x3f\xe6\xc3\xcf\xfd\xe1\x9f\x5f\x9d\x7f\xff\xee\xd3\xc7\xc7\xfe\xf0\xfd\xc3\xfb\x79\xfb\xf7\xfb\xd7\x77\xd7\x6f\xdc\xdd\xdd\xff\xfe\xbd\xc7\xbb\xae\xfb\xd7\x77\x8f\x1f\x3e\x7d\x7e\xf2\xee\xee\xfe\x0f\xef\xba\x1f\xef\x5f\xdf\xdd\xf7\xe3\x4f\xb7\x7f\x7c\x78\xa8\xfb\x2f\x5f\xfc\xff\xc3\xc3\xe3\x0f\x0f\xd5\xd7\x5f\xfe\xf5\xf3\xd1\xdd\xdd\x7d\xbf\x7f\xa8\x7e\xfd\xdd\x77\xda\x2a\xb2\x26\x18\x78\x05\x21\xb2\x9d\xc9\x82\x01\x38\x94\x11\x1a\x85\xac\x68\x8d\xbe\x7b\x6b\xb8\x6a\xe3\x01\x73\x77\x48\x19\xf4\x14\x4e\xf3\xde\x96\x43\x53\xcb\x77\x78\x06\x42\x21\x01\xc2\x31\x0b\xde\x90\x5b\xa6\x0b\x2d\xcc\xb0\x2c\x21\xab\x80\x8e\xa1\x87\xd7\x9b\xb5\x6f\x5b\x6e\x66\x37\x54\x7b\xbd\x16\x7f\x51\xfd\x44\xe2\x62\xcd\xd4\xd1\xbd\x8c\xce\x54\x9a\xdb\x6c\x33\x18\xb2\xb5\x00\x28\xf4\x48\x61\xf2\x1e\x20\x49\x8c\x5e\x24\x78\x24\x24\x70\xc0\x00\xa6\x7d\x30\x33\xc9\x15\x19\x48\xcf\x98\xc1\xf5\x98\xef\x22\xa1\xe1\xcd\x40\x79\x98\xc5\x29\xd1\x95\x36\x6b\x1b\x31\xa9\x61\x26\xfb\x1b\xdc\xe7\x86\x74\x6e\xc8\x9f\x3f\xbf\xad\x92\x69\x46\xeb\x9c\xad\x10\x60\x6b\x3b\x57\xb7\xac\xec\x99\x55\xa7\xf6\x40\xac\x04\xe2\xd4\xf2\xe2\x25\x7a\x14\x65\xd2\xfb\x58\x93\x66\xd2\x16\x1e\x3a\x83\xb4\x8e\xf8\x42\xd4\xb4\xbd\xa3\x8d\xb7\x6f\x52\x15\x44\x15\x53\x52\x71\x87\xcd\x1a\xc2\xb5\x34\x68\xaf\xa5\x64\xea\x6f\x78\xdd\x36\x5c\xb5\x24\x78\x46\x22\x71\xc1\x5e\x10\x88\x86\xc6\x72\x94\xa4\xb6\xd5\x4a\xcf\x5d\x02\xce\xab\xb6\xb5\xa5\x5a\xa3\x1e\xc6\x94\xdc\x20\x9b\xb7\x6c\xc7\x91\xda\x75\xce\x12\x84\x48\x31\xa9\xdd\xbd\xca\x39\x51\xe0\x78\xcd\xd9\x11\x69\x6d\xa4\x50\x07\x56\x0f\xf0\x9c\xc4\xe6\x3d\x34\x41\x93\x6a\x57\xaf\x85\x6e\x08\x7a\x43\xd8\xdf\xd6\x28\x6c\xe2\x1e\xfb\x30\x0f\x76\x86\x6e\x0c\xb1\x18\x10\xc2\x1c\x02\xa2\x35\x7d\x50\x69\x92\x8b\x74\x4b\xf5\xba\x84\x88\xb2\xfa\x96\x4e\xa6\x42\xbe\x9a\x9c\x78\x56\xcd\x29\xac\x1a\x3f\xc0\xb6\xd8\x40\xcf\xa1\x72\x25\x5f\x35\x8b\x6a\x4d\xe6\x68\xe1\x3e\x70\x50\xd4\xcf\xfe\xad\xd9\x0b\x6e\x78\x9e\xa9\xa4\x2c\x90\x14\xb0\x1a\x3d\x9c\xa6\xd4\x3b\x6d\x6d\x08\x12\x8c\xd0\x6d\x55\x6a\xfb\xcc\xa1\x92\x58\x6a\x83\xa3\xa9\xab\x10\x4b\x60\xa2\xa4\xca\x66\x1f\xc0\x54\x2f\xc1\xe1\x20\x70\x19\xcd\x3d\xd3\xb4\x4e\xa6\x79\x10\xf1\x9c\xc8\xf0\xcb\xbf\x2b\x02\x13\x7a\xc8\x64\x0a\xde\xb0\xdc\x88\xf8\x46\x28\x37\x14\xfd\x2c\xf2\xb3\xc6\xbf\x7d\xc9\xfc\x5f\x3e\x5c\xe0\xa8\x3f\xfa\xdb\x77\x3f\xf6\x87\x9f\xfb\xc3\xb7\xc3\x0f\xea\x0d\xcb\x37\xb6\x54\x1c\x3d\xbe\x89\x72\x6f\x27\xcc\x43\x6b\x79\xf3\x19\x8c\xd2\xab\xe2\x67\x67\x6a\x4e\x9f\xe3\x0c\xca\xe3\x98\xb4\x44\x8d\x88\x69\x74\xcd\x92\x28\x59\x70\xa6\x4b\x90\xb9\x3d\x4e\xd7\x3e\xb0\x8c\x99\x02\xd6\x58\x22\x42\x7b\xee\xd9\x98\x18\x8b\xec\x4b\xf8\x69\xed\x1b\xe1\xfa\x76\xa9\x73\xd1\xb0\x1e\x27\x1e\xb7\x73\x45\x4a\xa7\x68\x6d\x22\xd8\x62\xa0\xc4\xc4\xb4\xac\x47\x65\x17\x69\xb1\x6c\xdf\x7b\xaf\xc5\xde\x09\xab\x02\x83\xcc\xd9\x89\x7a\xb8\x77\xca\x3a\x8d\x67\x19\x57\xf9\x08\x3a\x63\x80\x77\x29\x6c\xbb\x5e\x34\x5a\xbc\x0f\x9f\xc9\xf1\x61\x5f\xf6\xc4\x10\x74\x93\x67\x44\x76\x53\x08\x07\x78\xb6\xa9\x11\xea\xf6\x85\x20\xb8\x22\x9d\x81\x96\x9a\x54\x0c\x34\xba\x9e\xc6\x9a\xb1\x8d\x7a\xf9\x10\x7a\x02\x4d\x06\x96\xaf\xb0\x3e\x9b\x27\x2c\xf6\xf2\x3c\xab\xfa\x00\x22\x68\x2e\x95\x38\x4d\xa1\xb9\x06\xca\x38\xce\x5e\x56\x28\xfb\xc4\xa4\x0f\x70\xbf\x41\x58\x37\xb4\x7d\xa3\x0b\x51\xeb\x19\x95\x94\xa7\x9a\x33\x82\x2e\x3a\x31\x64\x84\x04\x37\x00\x47\x6e\xa2\x40\xd2\x11\xef\x39\xd4\x04\x42\xee\x57\x88\x29\xdd\x56\x43\x6e\x2f\x42\x6b\x61\x0e\x3f\xe7\x02\xc3\x91\x8e\x3a\x40\xd5\x04\xaa\xc6\x24\xc2\x2c\x81\x00\x0c\x5b\x97\x78\x08\x6e\xe8\x73\x94\xa0\xc8\x0f\x5e\xed\xa6\xb5\x6e\x44\x78\x7b\xae\xdd\xdb\x5d\xd7\xb9\x1c\x27\x62\x02\x41\xcd\xc5\x31\x44\x90\xcb\xb4\x21\xbd\x97\xd7\x54\x5d\xdd\xc4\x56\x50\x6a\x0d\xdc\xdb\x3b\x8d\x23\x35\x2b\x07\xe9\x1a\x5e\x0b\x0a\x55\x2e\x61\x1d\x53\x25\x2a\x9b\xac\x7c\x2d\x60\x3d\xb5\x73\x95\xef\x8a\x5a\x05\xb0\x02\x3d\x81\x62\xce\x57\xed\x26\x7d\x86\xf5\x40\x88\x19\x75\x30\x49\x06\x76\x00\x3b\xa0\x69\x89\xb6\x66\x2f\x85\x2b\xae\x5c\xb1\x37\xcf\x5c\xb9\x75\x22\x61\x59\x7b\x7c\x4a\x13\xb4\xbd\xd5\x8b\x85\xb9\x29\x9c\xad\xc4\x44\x57\x4e\x54\x84\x34\x65\xef\x44\xde\x2e\x1d\x71\xa4\xcd\x2a\x27\xb7\x6f\x19\xb3\x11\x79\x73\x45\x9f\xf5\x26\xe7\x66\xf4\x8c\x23\x8f\x0c\xd6\x22\xb0\xa1\x31\x2b\x3f\x80\x3e\x78\x2a\xce\x46\x6d\x39\xcb\xe9\x78\x41\x54\xae\x3d\x51\x59\x67\x48\x7d\xf6\xaa\x28\xdb\x93\xb4\x0d\xd7\xd2\x03\x22\xdc\xb9\xb3\x0c\x8c\x7c\x5a\x0f\x57\xb5\x63\xc3\xd8\xa4\x6c\xec\xc8\x58\x81\x75\x64\xe7\x55\x87\x73\x8e\x70\xfd\xb7\xd7\x48\x76\x3b\xcf\x68\x3c\xae\x2b\x38\x79\x99\x53\x43\xcf\x72\xa6\xf6\x65\x0a\xd6\x57\x14\x99\x75\x45\x23\x22\x90\x70\x12\x78\x25\x6e\xe7\xec\x88\x64\xf3\xcf\x76\x2c\x6e\xe4\x40\xb9\x8a\xdc\x2d\x75\x2e\x5d\x7e\xc2\x29\x0b\x48\x01\x57\xeb\x8e\x85\xbe\x3c\x76\xe1\x45\x5e\xdd\xe9\xb4\x17\xed\xaf\x7a\x6d\xcf\x18\x72\x2d\x54\x68\xa2\x3e\xb1\x28\x8a\xc9\x41\x13\x85\x09\x55\xc6\xad\xc1\xb4\x3b\xba\x6a\x8f\x6b\x69\xcb\x9c\x88\x1e\x58\x0b\x22\x97\x2f\x31\x9c\x66\x15\x8c\xd6\x83\xc6\xbe\x3b\x81\x0c\x08\xb3\x62\xd9\x45\x54\xac\x3d\x36\x58\xd7\xe0\x0d\x33\x22\x6d\x1d\x36\xdf\x2e\xb5\x7e\x45\xbd\x7c\x0e\x0d\x2d\xf9\x5f\xd4\xff\xe9\xd3\xc7\x9f\x7e\x78\x78\x7c\x3b\x6f\xd3\x1f\xdf\x3e\xbc\xff\xf8\x0d\xe0\xc3\x7a\x69\xd4\xff\x56\x58\x58\x2f\x8d\xf4\xa7\x5a\x5e\x9a\xdc\x4f\xb5\xbc\x34\x9f\x9f\x6a\x79\x69\x0e\x3f\xd5\xf2\xd2\xb8\xfd\xca\x2f\x2f\xcc\xd5\xa7\x5a\x5e\x9a\x9f\x4f\xb5\xbc\x34\x26\xbf\x66\xe2\x8f\x8f\xfe\xf8\x36\x9f\x5d\x7a\x41\x69\xc5\x72\x03\x50\x36\xe2\x94\x6b\xfd\x2a\xa4\xeb\x58\x7d\x99\x1f\xad\x09\x56\xe2\xb9\x96\x59\x3d\x80\x84\x7b\x2a\x3c\x4c\x66\x2b\xee\x38\x3c\x4e\x4b\x4f\x98\x37\x57\x8b\xf1\x8c\x26\xe6\x88\x68\xe6\x58\x5c\x09\x8c\xf1\xb6\x8c\xa5\x24\x66\xb6\x55\x90\x76\x2c\xe2\x5f\x99\x4e\x37\x94\x73\xa3\xf5\xcc\x25\x23\xf6\x8e\x99\x24\x6b\x12\xa3\x61\xc0\x03\x8c\x58\x75\x90\x60\x79\x9c\x25\x2d\xb3\x8f\x09\x87\x84\x83\x9c\x9d\xaa\x8c\xd1\x96\x70\xae\x9d\x90\xab\x2f\x4b\xeb\x4a\x03\xc5\x9d\x03\x3d\xb5\x85\xe1\x34\x91\x2f\x6a\xbe\x6a\xdf\xc1\x59\x18\x51\x15\x85\xe5\x7c\x66\x74\x1d\xee\x2f\x97\x73\x84\x1b\xee\x67\x96\x35\x3f\x71\x2d\x57\xb4\x1a\xdb\xc8\x0f\x29\x58\xb0\xc1\x56\x1d\x77\xd1\x9c\x2b\x53\x3d\x47\x82\xc8\x29\x04\x7b\x5b\x30\x73\x1e\xf7\xee\x3c\x6b\xae\x7a\xe8\xee\xc5\xd4\x55\x98\xd7\x68\x51\x76\xf6\x82\xc9\x5d\x9a\xec\xa8\x03\x4b\xdd\x35\x12\xf6\x05\x73\xe8\x03\xa1\x1c\x27\x9f\x0c\xf0\x6b\x38\xda\x93\xe1\xf8\xea\xee\xee\x97\x57\xbf\xbc\xfa\x4f\x00\x00\x00\xff\xff\xcf\xc7\x0a\xe1\x75\x11\x00\x00")

func ConfigCliFleetEthProdJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthProdJson,
		"../config/cli/fleet-eth.prod.json",
	)
}

func ConfigCliFleetEthProdJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthProdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.prod.json", size: 4469, mode: os.FileMode(0644), modTime: time.Unix(1640110246, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0xa6, 0xcc, 0xbf, 0x4c, 0x70, 0x1f, 0xa1, 0x13, 0x2c, 0x1c, 0xa5, 0xfd, 0x19, 0x14, 0xb4, 0xe, 0x19, 0xdd, 0x6e, 0x52, 0x99, 0x41, 0x1a, 0xaf, 0xca, 0x12, 0xf4, 0x8d, 0xfe, 0xf9, 0x9a}}
	return a, nil
}

var _ConfigCliFleetEthStagingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\x4f\x8b\x1d\xd9\xcd\x87\xf7\xfe\x14\x97\xbb\x7e\xa9\x91\xce\xd1\x91\x74\x7a\x65\xde\x49\xb2\x8b\x09\x99\xec\x42\x16\xfa\xeb\x69\x68\xfa\x42\xf7\xb5\x21\x09\xf3\xdd\x43\x79\x0c\xf1\x90\x9e\xb5\x77\x85\xaa\x38\xe7\x41\x7a\x7e\xaa\x7f\xbf\xbb\x5c\xae\x7f\xad\xe7\xac\x7f\x7d\xbe\x7d\x7a\xbd\x3e\x5c\xda\x9e\x5e\xeb\xff\xce\xf2\x87\xdb\x1f\x1e\x5f\xe3\xf6\xb9\x5e\xfe\xf9\x9b\xfa\x8f\x4f\x9f\x5e\xef\xf5\xf2\xe3\xed\xb9\x1f\x3f\x5e\x1f\x2e\xe7\x19\x97\xcb\xf5\x8f\xcf\xe6\x4f\x95\xd7\x87\xcb\xfd\xe5\xd3\x97\x2f\x2f\x97\xeb\x9f\x9e\xaa\xee\xd7\x87\xcb\xb5\xee\x3f\x1f\xaf\x77\xfb\xf8\xf8\xfc\xf1\xfa\xf5\xdd\xff\xdf\x6e\xf7\x0f\xb7\xac\xf3\xd6\xbf\x7f\x29\x5d\x2e\xd7\x7a\xbe\x65\x3d\xfc\xf0\x03\x4f\x70\x98\x34\xc2\xa8\xf6\x5a\xa3\x17\x08\x92\x73\x68\x0d\x4d\xde\x6b\x79\x40\x27\x52\xc9\x5e\xd0\x7b\x7a\x4c\x1f\xae\x11\x1a\xd8\xd3\x39\x11\x66\x36\x73\x2f\x34\x9c\x29\x32\x7d\xa5\x43\xe3\x04\x66\x6c\x5f\x21\xae\x6d\x03\x83\x54\x37\x04\x53\xc8\x76\x42\x5b\x6c\xb4\xe1\x3d\xc9\xb1\xf1\x18\x63\x1f\x44\x0f\x44\xf3\x2b\xf5\x37\x88\x2d\xbb\x7d\x6e\xdc\x2d\x23\x6c\x31\x58\x02\x4d\xca\x88\xa9\x62\xde\x45\x58\xc0\xcc\x03\xb0\x3c\x2d\x4d\x2b\x0b\x88\x07\x2d\x3a\x91\xca\x61\x45\x1a\xae\x1e\x2a\x39\x82\x3c\x75\xa5\x29\x36\x94\x8f\x95\x60\xa4\xec\xee\xa1\xd9\x34\xc4\xb7\xa0\xc5\xc2\x35\xa7\x27\x40\xd7\x7b\x14\x3a\x70\xea\x81\x20\xc7\x98\xfb\x6d\x4a\x04\x13\x0d\x94\x3d\xb6\x09\xe0\xae\x26\xb3\x31\x68\xa7\x4c\x18\x2d\x6c\xa5\x06\xdc\x04\x3e\x32\x54\x5d\x7c\x62\x79\x37\x19\x8f\xd9\xee\x44\x7e\x3e\x8a\x85\xdb\xd8\x1c\x18\x95\x53\x64\xe5\xc6\xf6\x42\x25\x9e\x81\x0b\xb6\x18\xdb\xe4\x4e\x1f\xa1\x40\xdd\xb3\x63\xf9\x5c\xef\xe7\x3a\xc6\xd4\x63\x9f\x8c\xbf\x76\xf2\x0b\xe2\x3f\xbe\x5a\xf0\xb7\x97\xd3\xa6\xfc\xb3\x3d\x3e\xfd\x54\x2f\x9f\xeb\xe5\x4d\x1d\x5c\x48\xd7\x46\xe1\xd8\xb2\x30\x27\x92\x55\x75\xc7\xe0\x8a\xdd\xca\x6c\x84\x43\xd6\x28\xc9\xac\xd8\xe8\xb8\x01\xd5\x50\x4b\x22\x4c\x93\xa7\x44\xd7\x88\xca\xf0\x2d\xa3\xb5\x9c\x29\x15\xb9\x3d\x97\x53\xe9\x0e\x29\x0d\xe9\x94\x6c\x35\x9c\x63\xb7\xd1\x4c\x57\x70\xf0\xae\x53\x87\x35\x8e\x0d\x07\x2e\x7e\xbb\xd1\x7c\x7a\xe0\x66\xd2\x28\x63\x24\x22\x9a\xc6\x0e\xd6\x98\xdb\x26\xd2\x84\xda\xb9\x58\x78\xaf\x66\x04\xed\x89\x11\xce\x91\xda\x60\xd9\x4d\x7b\x63\x49\x67\x98\xb6\x89\x40\xc9\xf2\x50\x5b\xe7\x39\x92\x83\x78\x43\x78\x28\x14\x80\xa2\xac\x26\x08\x5c\x92\xdc\x2c\xaa\x49\xfa\x7e\x00\x1f\xa8\xfb\x18\x04\x07\xfe\x0e\x64\x51\x07\x42\x60\xf3\x0a\xb5\x4a\x9d\x16\x83\x3d\xd0\xdb\x07\x1a\xad\x08\x34\x5d\x0b\x6c\x29\x88\x84\xe6\xc8\x1a\x06\x05\x91\xa8\x45\xd0\x49\xd0\x52\xdc\x92\x30\x32\x38\x12\x78\xeb\x70\x40\x8a\x52\x4d\x2e\x62\x95\xb1\xfa\xec\x36\x4e\xad\xbd\xf4\xe4\x03\x80\x61\xd2\xbf\xda\xb0\x0f\xdc\xf3\x20\xfc\x5f\x1b\xfe\xf2\xe9\xf5\xe7\x0f\xb7\xfb\x63\x3f\x86\xdd\x1f\x6f\xcf\xaf\x6f\x38\x01\xf4\xbd\x6d\xf8\x6f\x5f\x81\xbe\xf7\xd8\xbf\x65\xf9\xde\xd3\xfd\xed\x2c\x7f\xba\xdb\xfd\x31\x7e\x77\xc3\x83\x6a\xf4\xb2\x3d\x63\x09\xb7\xd5\x1a\xcd\x0d\xb2\x50\x94\xf8\xdc\xcd\xbd\xd5\x2d\x5a\x46\xaf\x5d\xaa\xd5\x8e\x9c\xed\xb6\x7c\x42\x2b\x18\xa5\x8b\xb6\xd6\x0c\x9f\xa9\xd2\xa3\x79\x0d\x14\xe2\x73\xc5\xa9\xb0\x12\xaf\xea\xa1\x9b\x83\xad\x07\x75\x8a\x18\x8d\x55\x7b\x39\x67\x7e\x8d\xf4\x18\x7c\xe0\x94\xb7\xe3\xb2\x91\x02\xce\xeb\x86\xb8\xf9\x84\xc0\xec\x9c\x98\x96\xc2\x6b\x18\x71\xa7\xed\x29\xb0\x68\x58\x15\x3a\xf0\xa0\xad\x8e\x93\x56\x15\x6c\x9c\x8c\xe4\xea\xbb\x66\x29\xf1\x18\xa5\x64\x32\x60\xc6\xd2\xa5\x56\x98\x5b\x71\x37\x4f\xab\x28\x9c\x55\xcc\x5a\xd4\xcc\xac\xc0\x73\xeb\x7e\x8f\x2c\xc7\x3e\xe3\x72\x20\xe9\xdb\x8c\x39\x55\x94\x08\x79\x8d\x06\x84\x39\x58\x75\xf7\xd0\xc9\x50\xbc\x7b\x24\xec\x04\x5e\x74\xfe\x24\xa9\x2d\x0d\x0a\xc5\xa7\x50\xd4\x9a\xb8\xb3\x98\x86\x6c\x73\x9b\x41\x64\xcb\x5b\x41\x72\x6f\x96\xe0\x14\x58\x3e\x9d\x82\x1d\x66\x9b\x80\xf0\x1c\x04\x35\xaa\xd8\x1a\xd0\xd6\xdc\x75\x46\x1a\xf7\x38\xe0\x50\xfe\x26\xd0\xef\x2e\x97\x5f\xde\xfd\xf2\xee\x3f\x01\x00\x00\xff\xff\xff\x1f\xf2\xb6\x61\x08\x00\x00")

func ConfigCliFleetEthStagingJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthStagingJson,
		"../config/cli/fleet-eth.staging.json",
	)
}

func ConfigCliFleetEthStagingJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthStagingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.staging.json", size: 2145, mode: os.FileMode(0644), modTime: time.Unix(1640110246, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xe9, 0x85, 0x4b, 0x66, 0xa4, 0x1d, 0x4e, 0xaf, 0x21, 0xd7, 0xc2, 0x59, 0xf7, 0xd, 0xc2, 0x61, 0x4e, 0x4a, 0x9e, 0x38, 0x90, 0x6a, 0x2a, 0x16, 0xa6, 0x5c, 0x6d, 0x0, 0x5, 0x6, 0xb3}}
	return a, nil
}

var _ConfigCliFleetEthTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\xcb\x6e\x64\xc7\x0d\x86\xf7\x7a\x8a\x46\xaf\x83\x76\x15\xc9\xe2\x45\xab\x81\x2f\xc9\xc6\x19\x04\x71\xb2\x0a\xb2\x28\xde\x6c\x01\x82\x1a\x90\x5a\x02\x92\xc0\xef\x1e\xb4\x3c\x41\x64\x5b\xb3\x9e\x2d\x4f\xe1\xf0\x03\xff\x8f\xfc\xcf\xcd\xe1\x70\xfc\xfe\xfc\xe3\xf7\xf5\x52\xf7\xc7\xdb\xc3\xf1\xdb\xef\xbe\xfe\xfb\x9f\x8e\x7f\xb8\x96\xff\x5a\x0f\x59\xff\x7e\x39\x3f\x3f\x1d\x6f\x0f\xbd\xef\x9f\xea\xb5\xfc\xf1\xfc\xed\xdd\x53\x9c\x5f\xea\xf1\x5f\xbf\xaa\x7f\x73\xff\xfc\x74\xa9\xc7\x6f\xce\x0f\x7d\xf7\xe3\xf1\xf6\x70\xfd\xf5\xe1\x70\xfc\xee\x61\xfb\x7d\xe5\xf1\xf6\x70\x79\x7c\x7e\x7d\x79\x38\x1c\xff\x78\x5f\x75\xb9\xb6\xab\xcb\x4f\xa7\x4b\x3d\x5d\x8e\x9f\x3e\x7c\x7d\x3e\x5f\x3e\x9e\xb3\xae\x2d\xff\xf1\x5a\x3a\x1c\x8e\xf5\x70\xce\xba\xfd\xea\xab\xdc\xbb\xa0\x04\x14\x46\x29\x97\x11\xf4\x86\xad\x7b\x4b\x72\x99\x2d\x4a\x1a\x84\x5b\x16\x92\x62\xaa\x27\xa2\xd6\x64\x2f\x85\x68\x63\x40\x83\x5c\x31\x6a\xee\x5a\x12\x98\x62\x18\x98\x98\x99\xa9\x9d\x4b\x11\x0d\x18\x8a\x00\x29\xc3\x98\xdb\x16\x46\x0a\xfa\xc2\xd5\xab\xf7\x07\x92\xd3\x82\xd3\x54\x3d\x4d\xb2\x5b\x22\xfc\x84\xfd\x86\xd1\x6a\x98\xea\x92\x55\x2e\x32\x25\x60\x65\x6d\x81\xce\x39\x43\x1c\x45\x58\x32\x86\xc5\xdc\xc2\xca\x2d\x01\x15\x4b\x24\x71\x68\x02\x5d\x1f\x44\x39\xcb\xca\x22\x9c\x42\x42\x7b\x6e\x95\x51\x24\xaa\x20\x08\xc6\xd2\xd4\x5b\x74\xf9\x00\xdf\xb6\x92\xd9\x1c\x67\x12\x53\x56\x8c\x0f\x30\xf8\x34\xd5\x4e\x40\x78\x9a\x4c\xef\x53\xc6\xac\x35\xa6\xaa\x4a\x28\x63\x32\x5d\xbb\x39\x9b\x37\x4f\x59\x3c\x87\x8a\xc2\x22\x1c\x45\x34\xa6\x20\xf6\xf2\x2d\x12\x32\xd2\x27\x01\x72\x36\xea\xec\x6a\x1f\xe5\x35\x77\x10\x80\x91\x5b\x01\x4f\xf7\x02\xc4\xf4\x74\xc5\x42\x88\xa5\x1c\xcc\xbb\x80\x43\xb3\x64\x84\x53\x7c\xc0\xf5\xcb\x18\x59\x4f\x13\xe5\x15\xf2\x95\xf1\x9f\x9f\x3c\xf8\xdb\xe3\x55\xa6\xfc\xf3\xbe\xbb\xff\xa1\x1e\x5f\xea\xf1\x5d\x21\x78\x5a\xba\xaf\xcc\x3d\xa1\x74\x79\x8f\xf2\x95\x4e\xa3\x1d\xb3\x18\x16\x0f\x1b\x84\x40\x20\x28\x31\xca\x64\xb5\x64\x27\x2f\x4b\x5d\x19\x9c\xb6\x95\xda\x88\xe7\x16\xd0\x58\xdb\x59\x63\x08\x74\x25\x6a\x6c\xde\x0b\x6d\x4a\x6c\x20\xd7\x32\x8c\x00\xf1\xac\xc6\x3d\x4b\x6c\xc7\x5b\x21\x8c\xdf\x1f\x75\x91\xf2\xea\xe2\x80\x7d\x4d\x7d\x31\x6e\x26\x12\xb3\x91\x5a\x16\xc5\x02\x4c\xb4\x0b\x6b\x28\x5c\xd3\x47\xad\x98\x7d\x4d\x63\x54\x35\x23\x8c\x18\xb2\x57\xf2\x08\x74\x06\xeb\x95\x44\x46\x6d\x98\xec\xca\x5b\x68\xed\xe1\xcd\xb4\x1d\x6c\xb9\x37\x2f\xb1\x31\x65\x67\x70\xa5\xfe\x46\x88\xf9\x3e\xa5\x0c\xa9\x25\xb4\x70\x47\x62\x91\x6a\x10\xb9\xe5\xa8\x29\x26\x0b\x65\x16\xb4\xf6\x55\x4c\x58\xb5\x6b\xf9\x8e\x6d\x6e\xa1\x35\x38\x94\x23\x4b\x42\x8c\x36\x07\x14\x32\x0c\xf4\xb6\x5e\x1c\xbb\xd4\x47\xad\xd1\xe8\x88\x41\x01\xce\x46\x5b\x7c\x57\xed\x29\x8b\x88\x29\x8a\x0a\x5f\x85\x30\x38\x01\xd8\x69\x0a\xfc\x5e\x88\xbf\x3c\x3f\xfd\xf4\xf1\x7c\xb9\xeb\xbb\xd8\x97\xbb\xf3\xc3\xd3\x3b\x5a\x0c\xfa\xd2\x42\xfc\x7f\xb0\x83\xbe\x74\xf0\x6f\x59\xbe\x74\xbc\xbf\xce\xf2\x87\xcb\xbe\xdc\xc5\x67\xcf\xfc\x4e\xd4\x36\x1a\x38\xb6\x12\x47\xc8\x18\xcb\x65\xcf\x46\x67\x1f\xd3\x9b\xaa\x97\x25\x52\x69\x62\x72\x53\x4e\xc8\x06\xcc\x49\xbe\x95\x17\xcb\x80\x4d\xb8\x12\x29\x9a\xb2\xd1\x69\x42\x8c\x98\x06\x98\xbd\x76\x46\x94\x12\x4f\x84\xb9\x47\x6a\xb7\x1b\xe1\x72\xe0\x5a\x02\x01\xff\x3b\xf3\xb0\xae\x4a\x7e\xe6\x80\xce\x9c\x86\x8c\xab\xc6\x5c\x36\xb5\x5d\x97\xfb\x6e\x11\xba\xde\xd3\x09\xcd\x2b\x65\x04\x9b\xc8\x1a\x3c\x55\xaa\x07\x11\x8c\x14\xaa\x18\x1c\x56\xda\x23\xc3\x97\xd4\x1e\x04\xad\x2b\x5b\x85\x10\x73\xfb\x94\x3d\x81\x47\xa5\x66\xd6\xf4\x6c\x4b\xce\x95\x90\x45\x2e\xde\x5a\x66\xf8\x9b\xad\xc6\xf7\x29\x7b\x19\x6e\x10\xc1\xe9\x31\x5a\xcb\x87\x6a\x41\xa2\x01\x40\x40\x2e\xcb\x76\xf3\x1e\x8e\xb6\x46\xca\x56\xd0\x5c\xb3\x74\xbb\xd5\xd0\xee\xf6\x34\x9b\xbc\x15\x3a\xcd\x30\xe6\x1e\x3a\x62\x49\x80\xa7\x8c\x4a\x0e\xe4\x26\xb5\x6d\x6c\x59\x6c\xb2\xbb\x0d\x87\x6a\x7a\xd5\xdc\xf6\xcb\x56\xd3\x09\xe7\x69\x0e\x7d\xb3\xd4\x37\x87\xc3\xcf\x37\x3f\xdf\xfc\x37\x00\x00\xff\xff\x36\x83\xc6\x94\x7e\x08\x00\x00")

func ConfigCliFleetEthTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthTestJson,
		"../config/cli/fleet-eth.test.json",
	)
}

func ConfigCliFleetEthTestJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.test.json", size: 2174, mode: os.FileMode(0644), modTime: time.Unix(1640110247, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x19, 0xca, 0x8d, 0xaa, 0x69, 0x9b, 0xa2, 0xa1, 0xdd, 0xef, 0xf2, 0x63, 0x5e, 0xcd, 0xe2, 0x8f, 0xc7, 0x37, 0x7e, 0x41, 0xa1, 0xc1, 0x3f, 0x65, 0x80, 0xa, 0xa4, 0x27, 0x74, 0x8d, 0xc6}}
	return a, nil
}

var _ConfigCliFleetGoWakuTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x5b\x6f\xda\x30\x18\x86\xef\xf9\x15\x96\xaf\x27\x27\xb6\xb3\xe0\x70\x17\x30\x07\x0d\x81\x4a\x19\xe1\x30\xed\xc2\x24\xa6\x75\xa1\x71\x70\xec\xb4\x64\xea\x7f\x9f\xc2\x58\xd7\xae\x87\x2b\x4b\xef\xf7\xe9\x79\xf4\x5a\xdf\xaf\x16\x00\xf0\x5a\xe6\x99\xac\x2b\xed\x4a\xd8\x01\x3b\x71\x28\xe5\x97\x26\x9e\x6a\xae\xca\x54\x57\xd2\x9c\x60\x07\x58\xe3\xfe\xc4\xbd\x83\x2b\xad\x34\x3d\x9d\xef\xd4\x0d\xec\x80\x06\x01\x00\xec\xe7\x62\x7b\x90\xd9\x8b\x4d\x00\xe0\xe0\x20\xa5\x85\x1d\x00\x1f\xc4\xde\x55\x04\x15\x46\x67\xf0\x32\xeb\x6a\x6d\xa7\x3a\x93\x8d\xf4\xc7\xcf\x4b\xf8\xdd\x34\xf0\x6c\x22\xd4\x61\x2e\x4d\x25\xcd\xab\xe9\x95\x2b\x6f\xa7\xda\xaa\x9d\x4a\x85\x55\x3a\x2f\xdf\xd9\x99\x5b\x61\x55\xfa\x06\xfc\xaf\xe3\x9b\xd1\x52\xec\xdd\x73\x78\x8e\x00\x80\x9e\x2a\x02\x8f\x21\x82\x19\x22\x08\x63\xdf\xb3\x69\xe1\x51\x9f\xfa\xd4\x2b\x48\xe1\xe1\x70\xa1\x1c\x19\xc5\xf7\x5d\xbe\x9d\x2c\x07\x6a\x18\xed\x15\x2b\xf9\x43\xb8\x5b\x5b\x23\xe6\x8f\x3a\xd0\xa3\x45\x34\xda\xba\x69\x40\xe7\x64\x94\x9c\x8e\x78\xc0\x2f\xcd\xff\xd2\x31\x0d\x10\xf1\x23\xd4\xbc\x21\xfd\x48\x10\x55\x79\xd5\x9b\xdd\xf4\xb8\x39\xe5\x7c\x8c\x6f\xdb\xc3\x6f\xba\xbf\x49\x86\x55\xee\xea\x23\x0b\xae\x4f\x7c\x46\x79\x3f\x5b\xdd\xa7\xab\xf6\x7f\x02\xfa\x15\x11\x42\x11\x66\x14\x45\xf8\x23\xfe\x55\x1d\xd2\x55\x1a\xc6\x2e\xd9\x73\xe9\xee\xea\xf6\x5a\x6e\xac\xc0\xcc\xa4\x99\x70\x74\x8d\xbb\xb5\x78\x1c\xc7\x3b\x6e\xba\xc7\x1a\x9e\xf1\x2f\xff\x6d\x6e\xb5\x91\xef\x7f\xde\x73\x3d\x4c\x11\x0b\xcf\xfa\xc8\xf7\xfd\xd7\xf6\x24\x51\xe1\x2c\xb8\x6b\x4f\xe2\x71\xa2\xb6\x47\xb7\x64\x22\x26\xed\xc5\xd4\xc4\xc1\x8c\x2d\xf7\x75\xd4\x97\x76\x98\x28\xc7\x36\x03\x7c\xb1\xb7\x00\x78\x3a\x1f\x62\xe3\x4f\xc8\xe7\x77\xd8\x2c\xb7\x9e\x5a\xbf\x03\x00\x00\xff\xff\x6f\x42\x6c\x07\xe7\x02\x00\x00")

func ConfigCliFleetGoWakuTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetGoWakuTestJson,
		"../config/cli/fleet-go-waku.test.json",
	)
}

func ConfigCliFleetGoWakuTestJson() (*asset, error) {
	bytes, err := ConfigCliFleetGoWakuTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-go-waku.test.json", size: 743, mode: os.FileMode(0644), modTime: time.Unix(1640110247, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0xb3, 0x73, 0x7a, 0x21, 0xc3, 0xae, 0x64, 0x98, 0x28, 0xe, 0x97, 0x7, 0x7d, 0xbd, 0x1e, 0xc5, 0xdf, 0x69, 0x4, 0xaf, 0x2d, 0xf1, 0x12, 0xf5, 0x21, 0x4b, 0x6a, 0x93, 0x1a, 0x1a, 0x94}}
	return a, nil
}

var _ConfigCliFleetWakuv2ProdJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4d\x8f\xda\x30\x10\x86\xef\xfc\x0a\xcb\xe7\xca\x89\x9d\x10\x1c\x6e\x49\x60\x17\x09\x88\x80\x40\xd2\xdd\xaa\x07\x43\x0c\x35\x5f\x0e\x8e\x1d\xd8\x54\xfb\xdf\xab\x50\xda\x6e\xf7\xeb\xfa\xce\xab\xe7\xd1\x8c\xe6\x67\x0b\x00\x38\xe3\xc7\x9c\xd7\x95\x34\x25\xec\x82\x35\xdb\x97\xfc\x4b\x13\xc7\xb2\x27\xca\x95\xac\xb8\x7a\x82\x5d\xa0\x95\xf9\x1d\x47\x7b\x53\x6a\xae\x22\x79\x5c\x8b\x0d\xec\x82\x06\x01\x00\xec\x1f\xd9\x72\xcf\xf3\x17\x4d\x00\xe0\xdd\x9e\x73\x0d\xbb\x00\x9e\xd9\xce\x54\x04\x15\x4a\xe6\xf0\x36\x0b\xa5\xd4\xb1\xcc\x79\x23\xfd\xf6\xfd\x16\xce\x55\x03\xcf\xc7\x4c\xec\x13\xae\x2a\xae\xfe\x9b\x4e\x4c\xf9\x23\x96\x5a\xac\xc5\x8a\x69\x21\x8f\xe5\x3b\x9d\x44\x33\x2d\x56\x6f\xc0\xff\x76\x7c\x33\xca\xd8\xce\xfc\x0d\xaf\x11\x00\xd0\x12\x85\x6b\x51\x44\xb0\x8d\x08\x21\x88\x38\xd8\xd2\xab\xc2\x72\x6c\xc7\x76\xac\x82\x14\x16\xf6\x16\xc2\x90\x41\x70\x70\x2b\xea\x65\xce\xf2\x30\xc7\xa1\x18\x78\x32\x99\xd4\xab\x32\x51\xc4\x15\xbd\x69\x91\xc4\xed\x29\xf3\x7d\x12\x46\xdb\xed\x79\xa3\x7a\xb7\xdd\xff\xf0\x31\xa5\x08\x7b\x1e\xc2\x4e\x1b\x61\xb7\xfd\x91\x61\xd4\x96\xbb\x4c\x16\x5f\x3b\xf1\xe9\x31\x0b\x17\xc3\xf4\x94\x51\xb1\xb8\x44\xfd\x43\xde\xbe\x1f\x0f\x46\xe9\xe4\x1c\x6d\xea\x87\x7a\x5a\x39\xfc\x95\xc1\x71\x11\x26\x18\x61\xdb\x46\xd8\xa6\x1f\x09\xd2\xdd\xf0\xa8\xcb\x7e\xc4\x1e\xd6\x7c\x3d\xc3\x29\x79\x8a\x66\x1d\x3f\xe2\x9b\x51\x30\x37\xf3\x49\xdf\x0b\xfd\xf9\x65\x73\x09\x85\x10\x01\xbc\xf2\x5f\xde\x2e\xd1\x52\xf1\xf7\x0f\x88\x1d\x17\x11\xdb\x47\x18\x3b\x88\x7a\x57\xbd\x6f\xdb\xf6\x2b\x7b\x2a\xbc\xa9\xbb\xed\x8c\x83\x61\x2a\x96\x27\x93\x51\x16\x90\xce\x22\x56\x81\x3b\xa5\xd9\xae\xf6\xfb\x5c\xdf\xa7\xc2\xd0\xc7\x3b\x7c\xb3\xb7\x00\x78\xbe\x3e\x63\xe3\x4f\xc9\xe7\xbf\xd8\x94\x5b\xcf\xad\x5f\x01\x00\x00\xff\xff\x85\xf7\xd2\x66\xeb\x02\x00\x00")

func ConfigCliFleetWakuv2ProdJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetWakuv2ProdJson,
		"../config/cli/fleet-wakuv2.prod.json",
	)
}

func ConfigCliFleetWakuv2ProdJson() (*asset, error) {
	bytes, err := ConfigCliFleetWakuv2ProdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-wakuv2.prod.json", size: 747, mode: os.FileMode(0644), modTime: time.Unix(1640110247, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0x81, 0x84, 0xfd, 0x7d, 0x7e, 0x27, 0xc8, 0x5e, 0xb6, 0x38, 0xe1, 0x6, 0xa, 0xbc, 0x86, 0x87, 0x54, 0xa2, 0x2f, 0xe1, 0xa1, 0xc8, 0x6, 0x80, 0xfa, 0xed, 0xfe, 0x13, 0x6c, 0x81, 0xd9}}
	return a, nil
}

var _ConfigCliFleetWakuv2TestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4d\x6f\xe2\x3c\x1c\xc4\xef\x7c\x0a\xcb\xe7\x47\x4e\xec\x18\x92\x70\xa3\x3c\x50\x44\x21\xe2\x2d\x49\x61\xb5\x87\x04\x0c\x98\xbc\x38\x38\x76\x9a\xb2\xea\x77\x5f\x85\x65\xbb\xed\xb6\xdd\xeb\xcc\x68\x7e\x9a\xbf\xfe\x3f\x5a\x00\xc0\x05\xcb\x77\xec\x52\x09\x5d\xc2\x2e\xd8\x47\x69\xc9\xfe\x6b\x64\x4f\xfc\xcf\xcb\xad\xa8\x98\x7c\x86\x5d\xa0\xa4\xfe\x25\xf7\x53\x5d\x2a\x26\xfb\x22\xdf\xf3\x03\xec\x82\xa6\x02\x00\x38\xc8\xa3\x38\x65\xbb\x37\x49\x00\xe0\x30\x65\x4c\xc1\x2e\x80\x4f\x51\xa2\x2b\x82\x14\x2b\x15\xbc\x79\x77\x42\x28\x4f\xec\x58\x03\xfd\xf6\xfd\x26\xae\x64\x53\xbe\x9b\x46\x3c\x5d\x32\x59\x31\xf9\xce\x9d\xe9\xf2\xe8\x09\xc5\xf7\x7c\x1b\x29\x2e\xf2\xf2\x93\xcc\x52\x45\x8a\x6f\x3f\x14\xff\xd9\xf8\xc1\x0a\xa3\x44\xbf\x8a\x57\x09\x00\x68\xf0\x82\x1a\xd4\x46\x84\x12\x44\xb0\x89\x6c\xcb\x50\xdb\xc2\xb0\x4c\xcb\xb4\x8c\x82\x14\x06\xee\xf8\x5c\x93\x51\x2f\xa9\x42\xfe\x3c\x2c\x0f\x8b\xa3\x1e\x0f\x62\x77\xbc\x3f\xad\xeb\x41\x22\x46\x93\x43\xee\xcf\x33\x89\xbd\x76\xf6\x10\xe6\xeb\x53\xbd\x5e\x04\xd9\x6d\xfb\xef\x7e\x6c\x51\x44\x4c\x17\x61\xcb\x6d\x20\x5f\x10\xb2\xd9\x84\xd9\xd3\x4b\xe6\xac\xca\xb5\xaf\xe3\x43\xbf\x17\xe2\x68\x2c\xd8\x70\xb9\xad\xe5\xe4\xe4\x14\xc5\x68\xc8\xab\x99\x70\xed\xd8\xdf\xfc\x4d\x30\x29\xc2\x6d\x8a\x88\xe5\x22\x4c\x9c\xaf\x08\xe3\x98\x30\xe2\x9c\x27\x8f\xf5\xaa\x9d\x6c\xea\xc0\xf7\xc5\x58\xd9\x64\x30\xbd\x78\xf7\x8f\x77\xd4\x5e\xd4\x75\xfb\xf8\x64\x9d\xe9\xfa\xb4\x84\x57\xc0\xdb\xe3\x2d\x95\x90\xec\xf3\x0b\xbe\x2e\xc4\x16\x72\x3a\x57\xbc\x6b\x9a\xe6\x7b\x7a\x10\xf0\xce\x9c\x9e\xec\x69\xef\x21\xe0\xf1\x59\x87\x4e\xd4\x23\xb6\xef\xc9\x1e\x9d\x3b\x61\x72\x71\x07\x4c\xdd\x07\x5c\x3b\x9b\x21\xbe\xd1\x5b\x00\xbc\x5c\xbf\xb1\xe1\x07\xe4\xdf\xcf\xd8\x84\x5b\x2f\xad\x9f\x01\x00\x00\xff\xff\xd2\x21\xbe\x93\xec\x02\x00\x00")

func ConfigCliFleetWakuv2TestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetWakuv2TestJson,
		"../config/cli/fleet-wakuv2.test.json",
	)
}

func ConfigCliFleetWakuv2TestJson() (*asset, error) {
	bytes, err := ConfigCliFleetWakuv2TestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-wakuv2.test.json", size: 748, mode: os.FileMode(0644), modTime: time.Unix(1640110247, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0x6d, 0x28, 0xb7, 0xc2, 0xf3, 0x22, 0xe3, 0x6d, 0xc1, 0xeb, 0x4b, 0x42, 0xe2, 0x6, 0xb0, 0x60, 0x30, 0xdb, 0xe3, 0x26, 0xff, 0x9, 0xf5, 0xea, 0xe6, 0x56, 0xce, 0xa8, 0x98, 0x61, 0x70}}
	return a, nil
}

var _ConfigCliLesEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\xf2\xc9\x4c\xcf\x28\x71\x2d\xc9\x70\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x88\x83\xe5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\xc1\xe2\xb5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xa6\x74\x24\x05\x3a\x00\x00\x00")

func ConfigCliLesEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliLesEnabledJson,
		"../config/cli/les-enabled.json",
	)
}

func ConfigCliLesEnabledJson() (*asset, error) {
	bytes, err := ConfigCliLesEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/les-enabled.json", size: 58, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xee, 0x27, 0xa7, 0x74, 0xa0, 0x46, 0xa1, 0x41, 0xed, 0x4d, 0x16, 0x5b, 0xf3, 0xf0, 0x7c, 0xc8, 0x2f, 0x6f, 0x47, 0xa4, 0xbb, 0x5f, 0x43, 0x33, 0xd, 0x9, 0x9d, 0xea, 0x9e, 0x15, 0xee}}
	return a, nil
}

var _ConfigCliMailserverEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x0a\xcf\xc8\x2c\x2e\x48\x2d\x72\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x08\x83\xa5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\x75\xd0\x25\xfc\x42\x02\x82\x2b\xf3\x92\x71\x49\xfb\x26\x66\xe6\x04\xa7\x16\x95\xa5\x16\x61\xaa\x40\xc8\x05\x24\x16\x17\x97\xe7\x17\x81\x2c\x51\x2a\x2e\x49\x2c\x29\x2d\xd6\xcd\x4f\x4b\xcb\xc9\xcc\x4b\xd5\xcd\xcc\x4b\xca\xaf\x50\x02\x6b\xaa\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x7c\x73\xee\xbb\xb0\x00\x00\x00")

func ConfigCliMailserverEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliMailserverEnabledJson,
		"../config/cli/mailserver-enabled.json",
	)
}

func ConfigCliMailserverEnabledJson() (*asset, error) {
	bytes, err := ConfigCliMailserverEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/mailserver-enabled.json", size: 176, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xec, 0x81, 0x8b, 0x99, 0xb6, 0xdb, 0xc0, 0x8b, 0x46, 0x97, 0x96, 0xc7, 0x58, 0x30, 0x33, 0xef, 0x54, 0x25, 0x87, 0x7b, 0xb9, 0x94, 0x6b, 0x18, 0xa4, 0x5b, 0x58, 0x67, 0x7c, 0x44, 0xa6}}
	return a, nil
}

var _ConfigStatusChainGenesisJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6f\x13\x31\x10\x85\xef\xf9\x15\x96\xcf\x1c\xc6\xf6\x78\x66\xbd\x37\x4a\x59\x81\xc4\x8d\x5f\x30\xb6\xc7\xcd\xaa\x9b\x6c\x94\x6c\xa4\x16\xd4\xff\x8e\x92\x2c\xa1\x42\x9c\xf0\xcd\x7e\x33\xef\x7b\x7e\x3f\x37\xc6\x58\x99\xa6\xb9\xd8\xde\x5c\x2e\xc6\x18\x9b\x07\x47\x58\x24\xa0\x0b\x9e\x04\x42\x8e\xc8\x05\xe2\x43\xc0\x90\xfd\x67\xef\x74\xf8\xa8\x1e\x73\xfa\xb3\x62\x6c\x96\x49\xf6\x45\x6d\x6f\x2c\xbc\x38\x18\xe0\xd3\x00\x84\x8f\x8f\x31\x79\xb8\x1c\x7b\x1d\x7c\xfb\xb0\x22\x3c\x44\x89\x15\x94\x7d\x6b\x14\x81\x53\x2b\x92\x33\x0a\x05\x0d\xa1\xfa\x4e\x84\xaa\x36\x5f\xfe\x03\xb1\x59\x31\xb6\xcc\xfb\x36\x3e\xdd\x1d\x6c\xd9\xca\xb8\xff\x5a\x6d\x6f\x98\xf9\x16\xc4\x6e\xe7\x9d\x9e\x16\x95\xfa\x30\xcd\xe5\xd9\xf6\x06\x56\xa1\xca\x3c\xcc\xc7\xe7\xef\xe7\xc3\x61\x3e\x2e\xb6\x37\xcb\xf1\xac\xab\x96\x5f\x7f\xc8\x7e\x19\xcf\xbb\xbf\x97\x74\x3c\xb8\x08\x5f\xe4\xb4\xbd\x85\x8c\xa0\xa4\x35\xa3\x26\xa8\x89\x1c\x49\xe9\x72\x63\xe7\x92\x6a\xe0\x82\x80\x5d\x41\x27\x15\x52\xf0\x1d\x31\xa9\xcb\x21\xd5\x42\x9d\x80\x96\x96\x43\xb5\xef\x7d\xe3\x3f\x69\xdd\xfd\xf5\xfe\xef\x3a\xb6\x36\x96\xf3\xb4\xbc\xfe\xae\xea\xda\xce\x55\xd3\x97\xe5\x28\x8f\xb2\xc8\x1a\x30\x30\x92\x63\xe4\xc8\x01\x03\x75\xe4\x28\x91\x7a\x88\xc0\x9e\x12\xd3\x45\xa3\xe8\x21\x22\x45\xbe\xcc\x26\x52\x62\x0f\xa8\x14\x19\x99\xa9\xb1\xa7\x7c\xb3\x7e\x92\xd3\xb7\x71\x37\x2e\xef\xa1\x60\x37\x6f\x9b\x5f\x01\x00\x00\xff\xff\x91\xc6\xb3\x58\x64\x02\x00\x00")

func ConfigStatusChainGenesisJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigStatusChainGenesisJson,
		"../config/status-chain-genesis.json",
	)
}

func ConfigStatusChainGenesisJson() (*asset, error) {
	bytes, err := ConfigStatusChainGenesisJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/status-chain-genesis.json", size: 612, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0xf0, 0xc, 0x1, 0x95, 0x65, 0x6, 0x55, 0x48, 0x8f, 0x83, 0xa0, 0xb4, 0x81, 0xda, 0xad, 0x30, 0x6d, 0xb2, 0x78, 0x1b, 0x26, 0x4, 0x13, 0x12, 0x9, 0x6, 0xae, 0x3a, 0x2c, 0x1, 0x71}}
	return a, nil
}

var _keysBootnodeKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x4b\x01\x80\x40\x08\x04\xd0\xbb\x69\x58\x96\x6f\x1c\x66\x94\xfe\x11\x7c\xbe\x65\xab\x03\x07\x43\x1b\x87\x5b\x17\x8e\x9e\x23\x02\x11\x1a\x57\x51\x9d\x32\xf7\x24\x99\x1b\x08\xd8\xcb\xcf\x2d\xf4\xba\x3e\x7f\x00\x00\x00\xff\xff\x4a\x3d\x56\xc6\x41\x00\x00\x00")

func keysBootnodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_keysBootnodeKey,
		"keys/bootnode.key",
	)
}

func keysBootnodeKey() (*asset, error) {
	bytes, err := keysBootnodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/bootnode.key", size: 65, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xcf, 0x27, 0xd4, 0x96, 0x2e, 0x32, 0xcd, 0x58, 0x96, 0x2a, 0xe5, 0x8c, 0xa0, 0xf1, 0x73, 0x1f, 0xd6, 0xd6, 0x8b, 0xb, 0x73, 0xd3, 0x2c, 0x84, 0x1a, 0x56, 0xa4, 0x74, 0xb6, 0x95, 0x20}}
	return a, nil
}

var _keysFirebaseauthkey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x52\x85\x20\x18\x00\xe0\x7d\xef\xc2\xcc\x71\x4a\xc4\x76\x3f\x29\x43\x5c\x34\x2d\x4d\x59\x6a\xa5\x8d\x24\xde\x42\x7b\xfb\x3e\x00\x00\x9e\x87\xfa\xfe\xf3\xf9\x11\x5e\x20\x0e\x3a\xf6\x7b\xb8\xf2\x03\xc7\xd9\x4a\x10\xec\x46\x74\xa7\x26\x9a\xfd\x71\xec\xeb\xea\x98\x84\xb2\x9b\x6c\x92\x5b\xaa\x0d\x0e\x7c\x71\x71\xb8\xb1\xb1\xf2\x62\xcc\x61\xfb\x59\x91\xa2\x6f\x69\x6f\x29\x09\xdf\x07\x99\xb5\x09\x2a\x5f\x5b\x69\xa2\xa5\x91\x33\xa9\xa5\x67\x2d\x5d\xdd\xe1\xf0\xac\x82\xb0\xcf\xec\xd7\x72\x3d\x9c\x4f\x54\x4c\x3c\x2d\xad\x8b\xac\x32\x57\x8c\x06\xfc\x5d\x24\xd3\x7e\xf7\x1f\x00\x00\xff\xff\xd6\xa2\x00\x4a\x99\x00\x00\x00")

func keysFirebaseauthkeyBytes() ([]byte, error) {
	return bindataRead(
		_keysFirebaseauthkey,
		"keys/firebaseauthkey",
	)
}

func keysFirebaseauthkey() (*asset, error) {
	bytes, err := keysFirebaseauthkeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/firebaseauthkey", size: 153, mode: os.FileMode(0644), modTime: time.Unix(1541622131, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0x69, 0x23, 0x64, 0x7d, 0xf9, 0x14, 0x37, 0x6f, 0x2b, 0x1, 0xf0, 0xb0, 0xa4, 0xb2, 0xd0, 0x18, 0xcd, 0xf9, 0xeb, 0x57, 0xa3, 0xfd, 0x79, 0x25, 0xa7, 0x9c, 0x3, 0xce, 0x26, 0xec, 0xe1}}
	return a, nil
}

var _keysTestAccount1StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdd\x8a\xe4\x40\x08\x05\xe0\x77\xf1\x3a\x01\xb5\x4c\x55\x99\xb7\x51\xcb\x62\x9b\xf9\x6b\x92\x66\xd8\x65\xe8\x77\x5f\x32\xcb\x32\x97\x82\x7e\x1c\xcf\x17\x7c\xe6\x71\xde\x3e\xde\x61\x2f\x0b\xdc\x06\xec\xd0\x29\xb2\x25\xe9\xca\xd4\x71\x15\xe4\xbe\xba\x2a\xae\x68\x52\x94\x7c\x56\x33\x84\x05\x6c\x8c\x23\xcf\x13\x76\xf0\x49\x55\xc2\x8a\x50\xe1\x6a\x58\x7c\x93\x16\xb8\x79\x91\xe2\x9c\x4c\x39\x2d\x59\x5c\x61\x81\x38\xfe\xdc\x1f\x1f\xb0\x7f\x41\xdc\xee\xbf\xf2\x78\xe4\xef\x07\xec\xb0\x35\x17\xb1\x6e\xd4\x67\x6f\x8a\xea\xce\xd1\x4c\x95\x98\x5c\x54\x8b\xa9\xb7\x31\x2c\x89\x46\xe9\x53\x23\x31\x91\x42\x9a\x8c\x51\x6d\x9b\xf5\x92\xbf\xbd\xbb\x1d\xf6\x76\x5e\xfe\xed\x13\x76\x30\xc3\xad\x17\xec\x93\x38\x2a\x73\xca\xa8\x38\x34\xb0\x59\x6a\x2f\x2d\xe1\xf9\xff\xf0\x5a\xce\x73\x25\xee\x6b\x3c\x0e\x58\xe0\x65\x4c\xd8\xe1\xfc\x0e\xfc\x6f\xfc\xb1\xc7\xcb\x6b\x5e\x85\xf1\x02\xa7\xbd\x5e\x0f\xb8\x57\xc1\x62\x9e\x8d\xb3\xb6\x9a\xcc\x64\x82\xc6\x81\x6d\x93\xd9\xe8\x4a\xae\x54\x44\xab\x78\x20\x99\x85\x52\x99\x21\x65\x23\x1a\x19\x05\x16\x78\x87\xbd\x93\xf2\x02\x07\xec\x7d\x81\x3b\xec\xf4\x5c\xe0\xcd\x02\x76\x68\x9d\xb1\x0d\xa4\x40\x2f\x51\x49\xad\x4f\x51\x47\xd6\xda\xbd\x56\xaf\xc5\xc2\x37\x66\xec\x41\x45\xc8\xb4\x8c\xd0\x4a\x6d\xe0\x4c\x95\x9e\x09\xcf\xe7\xdf\x00\x00\x00\xff\xff\xd2\xdb\x1b\x65\xe9\x01\x00\x00")

func keysTestAccount1StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1StatusChainPk,
		"keys/test-account1-status-chain.pk",
	)
}

func keysTestAccount1StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount1StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xba, 0x35, 0x1, 0x2b, 0x9d, 0xad, 0xf0, 0x2d, 0x3c, 0x4d, 0x6, 0xb5, 0x22, 0x2, 0x47, 0xd4, 0x1c, 0xf4, 0x31, 0x2f, 0xb, 0x5b, 0x27, 0x5d, 0x43, 0x97, 0x58, 0x2d, 0xf0, 0xe1, 0xbe}}
	return a, nil
}

var _keysTestAccount1Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4b\x8e\x24\x3b\x08\x45\xf7\xc2\x38\x42\xb2\x31\xd8\xd8\xf3\x57\xfb\xc0\x80\xf5\x52\xf5\x4b\x45\xa4\x4a\xdd\x2a\xd5\xde\x5b\x91\x83\xee\x19\x20\x74\xee\x3d\xdf\xa0\xee\x47\x9c\x27\x0c\x78\x29\xfc\x5f\x2a\xc8\xae\x2e\x2d\xb0\xd6\x6c\x14\x2f\x9d\xb3\xb3\x34\x6c\x51\x9d\xa5\x38\x1b\x6c\x60\xc7\xef\xfb\xe3\x13\xc6\x37\xd8\xed\xfe\x7f\x1c\x30\x40\xe3\xdc\x33\xca\x6e\x8f\xe3\x7a\x78\x9e\x1f\xf1\xeb\x01\x03\x48\x02\x7d\x89\xb7\xb4\x64\xae\x42\xea\x1a\x9c\x66\x9a\x29\x4a\x96\xa4\xa5\x63\xd0\x9c\xb9\x89\x66\xa5\x82\xe4\x66\x92\x08\x5b\x4c\x6a\x95\xd6\x5f\xde\x5d\x0f\x7d\x3f\xaf\xd8\xdb\xd7\xc5\x2d\xc4\xa6\xb4\xb0\xd8\xcc\x19\xbb\xf6\x9e\x5b\x0e\xe9\x5a\x3b\xb2\x24\xf8\xd9\xe0\xd5\x17\x0c\x38\x9f\x85\xe1\xb9\xfe\x83\xf8\xeb\x5b\x7c\xc0\x28\xb8\xc1\x07\x0c\xac\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x64\x83\x53\xdf\x2e\x81\xdc\x99\xb1\xc9\x9c\x46\xab\x68\x22\xb1\xa4\xe2\xad\x79\x70\xca\x54\x8b\xa1\x08\xf6\x59\x9e\xb3\x06\xad\x1e\xc8\x68\x58\xda\xc2\xa9\xd6\xae\x22\xef\x6a\x30\xa0\xa3\x97\x60\xd2\xde\x22\xbc\x74\xcf\x8b\x6a\xc3\xb6\x12\x13\x55\x26\x4c\xcb\x78\x95\x6c\x6d\x51\xb4\x14\x42\x55\xa7\x75\x76\x5b\x2e\x53\xf0\x49\xba\x39\x0c\x98\x35\x11\x59\x95\xbd\x74\xa3\x9d\xaa\xfb\x2e\x39\xe3\x8e\x16\x8c\xd9\x19\x6d\x31\x6c\xf0\x15\xc7\x79\xfb\xbc\x24\x7f\xfe\x04\x00\x00\xff\xff\x0d\x85\xaf\xaf\xeb\x01\x00\x00")

func keysTestAccount1PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1Pk,
		"keys/test-account1.pk",
	)
}

func keysTestAccount1Pk() (*asset, error) {
	bytes, err := keysTestAccount1PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x43, 0xc2, 0xf4, 0x8c, 0xc6, 0x64, 0x25, 0x8c, 0x7, 0x8c, 0xa8, 0x89, 0x2b, 0x7b, 0x9b, 0x4f, 0x81, 0xcb, 0xce, 0x3d, 0xef, 0x82, 0x9c, 0x27, 0x27, 0xa9, 0xc5, 0x46, 0x70, 0x30, 0x38}}
	return a, nil
}

var _keysTestAccount2StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdb\x8a\x1c\x41\x08\x80\xe1\x77\xf1\xba\x1b\x2c\xb5\x8e\x6f\x63\xa9\x45\x86\x3d\x0d\xdd\xc3\x92\xb0\xcc\xbb\x87\xde\x10\xf6\xd2\x8b\xff\x43\xfd\x82\xcf\x38\xce\xdb\xc7\x3b\x0c\xde\xe0\xe6\x30\x60\x9a\x69\xa3\x4c\xfb\x4a\x9a\x76\x59\xa1\xbb\xd6\x25\x3b\x17\x12\x49\x94\x8c\xd0\x60\x03\x75\x3f\xe2\x3c\x61\x00\x61\xd6\xec\x18\x95\xd6\x2a\x19\x6b\x5f\xa6\x73\x8a\x16\x0e\x66\xa7\xa6\x5a\x3c\x16\x5d\x91\x1d\x7f\xee\x8f\x0f\x18\x5f\x60\xb7\xfb\xaf\x38\x1e\xf1\xfb\x01\x03\xa4\xf6\x5c\x3d\x2c\xa8\xba\x4a\x11\x66\x77\xf4\x9c\x27\x77\x5f\x69\x61\xd7\xe0\x1e\x5c\x98\xe6\x42\xed\xc6\xce\x4b\x71\x52\x42\xd1\xa6\x34\x2f\xf9\xdb\xbb\xeb\xa1\x6f\xe7\xe5\xdf\x3e\x61\x80\x75\xae\x91\x7b\x23\x69\xa4\x8e\x3d\x73\x2f\x09\xb5\xf6\x98\xdd\x4a\x15\x78\xfe\x0f\x61\x80\xc6\xb9\x27\x6a\xbb\x3d\x0e\xd8\xe0\xc5\x17\x0c\x38\xbf\x17\xfe\x37\xfe\xd8\xfe\xf2\x1a\xd7\xc3\x68\x83\x53\x5f\xaf\x03\xd8\xb4\x18\xb7\x94\x5b\xc9\x92\x75\x22\x1b\x49\x14\x94\x42\x86\xc9\xc9\x5b\x53\xa9\xc2\x5c\xb4\x7a\x12\xd4\xa6\x4b\x94\x32\x16\x66\xce\x15\x61\x83\x77\x18\x2d\x75\xda\xe0\x80\xd1\x36\xb8\xc3\x48\xcf\x0d\xde\xd4\x60\x00\x56\x47\x67\x6a\xd6\xb1\x36\x2b\xd1\x66\x89\x55\x72\xe5\x54\xa8\xab\x72\x4c\x6a\xd1\x91\x49\x1a\x2f\xa1\x99\x45\xcd\x94\x85\x5c\x22\xb1\x34\x78\x3e\xff\x06\x00\x00\xff\xff\x4e\x39\x80\x7d\xe9\x01\x00\x00")

func keysTestAccount2StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2StatusChainPk,
		"keys/test-account2-status-chain.pk",
	)
}

func keysTestAccount2StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount2StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xf8, 0x5c, 0xe9, 0x92, 0x96, 0x2d, 0x88, 0x2b, 0x8e, 0x42, 0x3f, 0xa4, 0x93, 0x6c, 0xad, 0xe9, 0xc0, 0x1b, 0x8a, 0x8, 0x8c, 0x5e, 0x7a, 0x84, 0xa2, 0xf, 0x9f, 0x77, 0x58, 0x2c, 0x2c}}
	return a, nil
}

var _keysTestAccount2Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x8a\x1c\x3d\x0c\x40\xef\xa2\x75\x15\xd8\xb2\x6c\x4b\xde\x7d\x7c\xe4\x20\xb2\x24\x93\x66\xfe\x9a\xaa\x66\x48\x18\xe6\xee\xa1\x7a\x91\x2c\x25\xc4\xd3\x7b\x5f\xa0\xee\x47\x9c\x27\x0c\xf8\x2f\x69\x16\xc4\x8c\x8d\x5d\x8a\x58\x51\xe9\x38\x57\xa5\x96\xfd\xff\x9c\x56\x17\x4e\x3f\x38\x13\x6c\x60\xc7\xef\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\x33\x0e\x18\xa0\x71\xee\x19\x79\xb7\xc7\x71\x1d\x3c\xd7\x8f\xf8\xf5\x80\x01\xac\x2b\xc9\x5c\x9a\x50\x69\xf5\xa8\x2b\x17\x2d\xcc\x33\x8a\x64\xb7\x95\xc4\x6a\x36\xa6\x65\x2c\xc8\x84\x19\x31\x45\xea\xd6\x72\x4b\x84\x75\xf1\x5f\xde\x5d\x0f\x7d\x3b\xaf\xb7\xb7\x4f\x18\xd0\x75\x56\xd1\xa0\x2e\xb9\xf6\x1e\x1d\x3d\x9a\xd7\xe9\xac\x14\x48\xa1\xf0\xbd\xc1\x8b\x2f\x18\x70\x3e\x85\xe1\x39\xfe\x83\xf8\xcb\x6b\xbc\xc3\x28\xb8\xc1\x3b\x0c\x6c\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x78\x83\x53\x5f\xaf\x00\xec\xd1\x6c\x72\xe4\x10\x4f\xd6\xdb\x9a\x73\x39\x91\x99\x22\xd5\xd2\x92\x2f\xa1\x24\xd3\x4c\xd4\x68\x51\x10\xdb\xa5\x35\xeb\x72\x9e\x49\xfa\x25\xf2\xa6\x76\x29\x2f\xf7\x59\x44\x3a\x7a\xcf\xb8\x26\x8a\x52\x59\x39\x72\xd4\x92\x4a\xe4\xc2\x1e\x26\x66\xa8\x2b\x66\xc2\xda\x82\xb5\xa7\x8a\xae\x54\xa4\x5b\xbb\x48\x37\x87\x01\x93\x51\xba\x4a\xde\x25\x05\xed\x24\x5e\x77\x6d\x4b\x76\xb6\x92\x2a\xf5\xc9\xd1\x14\x36\xf8\x8c\xe3\xbc\x7d\x5c\x91\xdf\x7f\x02\x00\x00\xff\xff\x80\x42\xa2\x5c\xeb\x01\x00\x00")

func keysTestAccount2PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2Pk,
		"keys/test-account2.pk",
	)
}

func keysTestAccount2Pk() (*asset, error) {
	bytes, err := keysTestAccount2PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x72, 0xd5, 0x95, 0x5c, 0x5a, 0x99, 0x9d, 0x2f, 0x21, 0x83, 0xd7, 0x10, 0x17, 0x4a, 0x3d, 0x65, 0xc9, 0x26, 0x1a, 0x2c, 0x9d, 0x65, 0x63, 0xd2, 0xa0, 0xfc, 0x7c, 0x0, 0x87, 0x38, 0x9f}}
	return a, nil
}

var _keysTestAccount3BeforeEip55Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xdb\x8a\x1c\x31\x0c\x44\xff\x45\xcf\xdd\x20\x4b\xbe\xc8\xfe\x1b\x59\x96\xc8\xb0\xb7\xa1\x7b\x58\x12\x96\xf9\xf7\xd0\x59\xc2\x3e\xd6\x43\x1d\x4e\xd5\x17\x7c\xfa\x71\xde\x3e\xde\x61\xf0\x06\xb7\x05\x03\xd0\x96\xb9\x85\xed\x46\x61\x7b\x26\x4d\xbb\xf8\x2a\x7b\x26\x33\xec\xd4\x16\x2f\x81\x0d\x74\xad\xc3\xcf\x13\x06\xb0\x2e\xce\x5e\xbb\xac\x2c\x58\x35\x16\xca\xe4\xd2\x67\x27\x8c\x62\x75\x56\x9a\x55\xdc\x33\x6c\x60\xc7\x9f\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\xcb\x8f\x87\xff\x7e\xc0\x00\xa2\xd2\xbb\x98\x77\x56\x2d\x93\x5a\x6a\xa5\x60\xc9\x9c\xd2\x52\x31\x6b\x53\xa8\x24\x6a\x2b\x23\x5a\xa7\x16\xca\xc2\x0d\x3d\x27\xa6\x4e\x66\x97\xce\x37\xef\xae\x87\xbe\x9d\x17\xff\xf6\x09\x03\xa4\x27\x6a\xd9\x49\x5b\xa3\xb6\x34\xd9\xd2\xb4\xc8\x6c\x12\xfb\x94\x89\xf0\xfc\x5f\x84\x01\xea\xe7\x9e\x48\x76\x7b\x1c\xb0\xc1\xcb\x0a\x18\x70\xfe\x13\xfe\x8e\x3f\xec\xf5\xf2\xea\xd7\x61\xb4\xc1\xa9\xaf\xd7\x80\x45\x93\x50\xb5\xd5\x2c\x11\xd8\xc9\x98\x51\x1a\x51\xc6\xf0\x5c\x83\xc2\xd8\x53\x66\xa6\xc9\x42\x9a\x05\x25\x6a\xc1\xc9\x56\xa5\x4b\x2d\x13\x36\x78\x87\x21\xa9\xd3\x06\x07\x0c\xd9\xe0\x0e\x23\x3d\x37\x78\x53\xbb\xd4\x10\x33\x63\x13\x89\xd5\x66\xa0\x93\xbb\xd7\x48\x5c\x4a\xcb\xa5\x27\x8e\xe2\x14\x25\x65\xaa\x1a\x9d\x58\x8a\x22\xba\x9b\xa6\x28\xd6\x98\x12\x3c\x9f\x7f\x03\x00\x00\xff\xff\x4c\x6d\xd5\xbe\xe9\x01\x00\x00")

func keysTestAccount3BeforeEip55PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount3BeforeEip55Pk,
		"keys/test-account3-before-eip55.pk",
	)
}

func keysTestAccount3BeforeEip55Pk() (*asset, error) {
	bytes, err := keysTestAccount3BeforeEip55PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account3-before-eip55.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1586880790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x40, 0x56, 0xc1, 0x5e, 0x10, 0x6e, 0x28, 0x15, 0x3, 0x4e, 0xc4, 0xc4, 0x71, 0x4d, 0x16, 0x99, 0xcc, 0x1b, 0x63, 0xee, 0x10, 0x20, 0xe4, 0x59, 0x52, 0x3f, 0xc0, 0xad, 0x15, 0x13, 0x72}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../config/README.md": ConfigReadmeMd,

	"../config/cli/anon-metric-node-client.json": ConfigCliAnonMetricNodeClientJson,

	"../config/cli/anon-metric-node-server.json": ConfigCliAnonMetricNodeServerJson,

	"../config/cli/fleet-eth.prod.json": ConfigCliFleetEthProdJson,

	"../config/cli/fleet-eth.staging.json": ConfigCliFleetEthStagingJson,

	"../config/cli/fleet-eth.test.json": ConfigCliFleetEthTestJson,

	"../config/cli/fleet-go-waku.test.json": ConfigCliFleetGoWakuTestJson,

	"../config/cli/fleet-wakuv2.prod.json": ConfigCliFleetWakuv2ProdJson,

	"../config/cli/fleet-wakuv2.test.json": ConfigCliFleetWakuv2TestJson,

	"../config/cli/les-enabled.json": ConfigCliLesEnabledJson,

	"../config/cli/mailserver-enabled.json": ConfigCliMailserverEnabledJson,

	"../config/status-chain-genesis.json": ConfigStatusChainGenesisJson,

	"keys/bootnode.key": keysBootnodeKey,

	"keys/firebaseauthkey": keysFirebaseauthkey,

	"keys/test-account1-status-chain.pk": keysTestAccount1StatusChainPk,

	"keys/test-account1.pk": keysTestAccount1Pk,

	"keys/test-account2-status-chain.pk": keysTestAccount2StatusChainPk,

	"keys/test-account2.pk": keysTestAccount2Pk,

	"keys/test-account3-before-eip55.pk": keysTestAccount3BeforeEip55Pk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{ConfigReadmeMd, map[string]*bintree{}},
			"cli": &bintree{nil, map[string]*bintree{
				"anon-metric-node-client.json": &bintree{ConfigCliAnonMetricNodeClientJson, map[string]*bintree{}},
				"anon-metric-node-server.json": &bintree{ConfigCliAnonMetricNodeServerJson, map[string]*bintree{}},
				"fleet-eth.prod.json":          &bintree{ConfigCliFleetEthProdJson, map[string]*bintree{}},
				"fleet-eth.staging.json":       &bintree{ConfigCliFleetEthStagingJson, map[string]*bintree{}},
				"fleet-eth.test.json":          &bintree{ConfigCliFleetEthTestJson, map[string]*bintree{}},
				"fleet-go-waku.test.json":      &bintree{ConfigCliFleetGoWakuTestJson, map[string]*bintree{}},
				"fleet-wakuv2.prod.json":       &bintree{ConfigCliFleetWakuv2ProdJson, map[string]*bintree{}},
				"fleet-wakuv2.test.json":       &bintree{ConfigCliFleetWakuv2TestJson, map[string]*bintree{}},
				"les-enabled.json":             &bintree{ConfigCliLesEnabledJson, map[string]*bintree{}},
				"mailserver-enabled.json":      &bintree{ConfigCliMailserverEnabledJson, map[string]*bintree{}},
			}},
			"status-chain-genesis.json": &bintree{ConfigStatusChainGenesisJson, map[string]*bintree{}},
		}},
	}},
	"keys": &bintree{nil, map[string]*bintree{
		"bootnode.key":                  &bintree{keysBootnodeKey, map[string]*bintree{}},
		"firebaseauthkey":               &bintree{keysFirebaseauthkey, map[string]*bintree{}},
		"test-account1-status-chain.pk": &bintree{keysTestAccount1StatusChainPk, map[string]*bintree{}},
		"test-account1.pk":              &bintree{keysTestAccount1Pk, map[string]*bintree{}},
		"test-account2-status-chain.pk": &bintree{keysTestAccount2StatusChainPk, map[string]*bintree{}},
		"test-account2.pk":              &bintree{keysTestAccount2Pk, map[string]*bintree{}},
		"test-account3-before-eip55.pk": &bintree{keysTestAccount3BeforeEip55Pk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
